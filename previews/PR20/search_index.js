var documenterSearchIndex = {"docs":
[{"location":"Assignments/assignment03_code/#Instructions-for-Assignment03","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"","category":"section"},{"location":"Assignments/assignment03_code/#Introduction","page":"Instructions for Assignment03","title":"Introduction","text":"","category":"section"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"Note: this file is runnable in its current state, but is incomplete. You can run the file from the command line, or use the VS Code julia extension to run individual lines.","category":"page"},{"location":"Assignments/assignment03_code/#Writing-real-Code","page":"Instructions for Assignment03","title":"Writing real Code","text":"","category":"section"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"In assignments 1 and 2, variable and function names were often things like question1 and question2. From now on, we'll use more informative function and variable names so that our code is \"self documenting.\"","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"We'll also continue to use doc strings to help understand the specifications required for our functions.","category":"page"},{"location":"Assignments/assignment03_code/#Understanding-DNA-sequences","page":"Instructions for Assignment03","title":"Understanding DNA sequences","text":"","category":"section"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"We've already done a fair amount of work in assignment 2 and in lesson 3 to make some functions for understanding DNA sequences. Below, I've put a couple of function signatures with docstrings, but you can (and should!) copy the necessary functionality out of the functions you've already defined, if applicable.","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"tip: Tip\nIf you defined those functions in the julia REPL, you can go find them from the command line or the julia REPL! In VS Code, open ~/.julia/logs/repl_history.jl.","category":"page"},{"location":"Assignments/assignment03_code/#Question-1-a-complement-function","page":"Instructions for Assignment03","title":"Question 1 - a complement function","text":"","category":"section"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"\"\"\"\n    compliment(base)\n\nGet the DNA compliment of the provided base:\n\n    A <-> T\n    G <-> C\n\nAccepts `String` or `Char`, but always returns `Char`.\nIf a valid base is not provided, the function throws an error.\n\nExamples\n≡≡≡≡≡≡≡≡≡≡\n\n    julia> compliment('A')\n    'T'\n\n    julia> compliment(\"G\")\n    'C'\n\n    julia> compliment(\"T\")\n    'A'\n\n    julia> compliment('C')\n    'G'\n\"\"\"\nfunction compliment(base)\n    # See Lesson 3 for more info\nend","category":"page"},{"location":"Assignments/assignment03_code/#Question-2-some-boolean-functions","page":"Instructions for Assignment03","title":"Question 2 - some boolean functions","text":"","category":"section"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"\"\"\"\n    ispurine(base)\n\nA boolean function that returns `true` if the base is a purine (A or G)\nand `false` if it is not.\nThe function only supports bases A, C, G, and T (throws an error for other values).\nAccepts `String` or `Char`.\n\nExamples\n=========\n\n    julia> ispurine('A')\n    true\n\n    julia> ispurine(\"C\")\n    false\n\n    julia> ispurine('B')\n    Error: \"Base B not supported\")\n\"\"\"\nfunction ispurine(base)\n    # We haven't made this before, but you should have all the pieces\nend\n\n\"\"\"\n    ispyrimidine(base)\n\nA boolean function that returns `true` if the base is a pyrimidine (C or T)\nand `false` if it is not.\nThe function only supports bases A, C, G, and T (throws an error for other values).\nAccepts `String` or `Char`.\n\nExamples\n=========\n\n    julia> ispyrimidine('G')\n    false\n\n    julia> ispyrimidine(\"T\")\n    true\n\n    julia> ispyrimidine('X')\n    Error: \"Base X not supported\"\n\"\"\"\nfunction ispyrimidine(base)\n    # This is the strict opposite of `ispurine`.\n    # In principle, you can write this in one line - remember `!` means `NOT`.\n    # Eg `isuppercase(x)` means the same thing as `!islowercase(x)`\nend","category":"page"},{"location":"Assignments/assignment03_code/#Question-3-Using-boolean-functions-for-composition","page":"Instructions for Assignment03","title":"Question 3 - Using boolean functions for composition","text":"","category":"section"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"For the following function, you should not need to re-write the logic checking what kind of base this is. You've already written it, and it's in a convenient function!","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"A big part of programming is re-use; if you find yourself writing the same code multiple times, you should probably put it in a function and call that instead!","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"\"\"\"\n    base_type(base)\n\nDetermines whether a base is a purine (A or G) or pyrimidine (T or C),\nand returns a `String`.\n\nExamples\n≡≡≡≡≡≡≡≡≡≡\n\n    julia> base_type(\"G\")\n    \"purine\"\n\n    julia> base_type('C')\n    \"pyrimidine\"\n\n    julia> base_type('Z')\n    Error: \"Base Z not supported\"\n\n    julia> x = base_type('A'); println(x)\n    purine\n\"\"\"\nfunction base_type(base)\n    # Note: this is different than the `base_type()` we defined in the lesson.\n    # Here, we want a fruitful function that returns the value rather than `print`ing it.\n    # Also, there's no need to re-write the logic. If your `ispurine` / `ispyrimidine` functions work,\n    # you can use them here.\nend","category":"page"},{"location":"Assignments/assignment03_code/#Question-4-Modifying-arguments-instead-of-adding-a-bunch-of-logic","page":"Instructions for Assignment03","title":"Question 4 - Modifying arguments instead of adding a bunch of logic","text":"","category":"section"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"One thing that none of our functions can do so far is to accept lowercase sequences. Most of the time, DNA sequences are written with uppercase letters, but we may not be able to count on that.","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"If we want to be able to accept lowercase strings, one possibility would be to add additional logic, Eg","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"if base == 'G' || base == \"G\" || base = 'g' || base == \"g\"","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"But that's a lot of typing - especially considering we'd have to do this for every base! In programming, it's OK to be lazy (in fact, it's often better)! Instead, we can modify the parameters to be formatted the way we expect. For example, the uppercase() function takes a String or Char and returns the uppercase representation of it.","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"julia> uppercase('a')\n'A': ASCII/Unicode U+0041 (category Lu: Letter, uppercase)\n\njulia> uppercase(\"attc\")\n\"ATTC\"","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"Note that, if you simply use this function on a variable or parameter, it will remain unchanged (the function doesn't \"mutate\" its argument), but you can re-assign the variable or parameter.","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"julia> seq = \"attcgc\"\n\"attcgc\"\n\njulia> uppercase(seq)\n\"ATTCGC\"\n\njulia> seq\n\"attcgc\"\n\njulia> seq = uppercase(seq)\n\"ATTCGC\"\n\njulia> seq\n\"ATTCGC\"","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"Some julia functions can mutate their aruments - we'll encounter some of those soon.","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"\"\"\"\n    gc_content(sequence)\n\nCalculates the GC ratio of a DNA sequence.\nThe GC ratio is the total number of G and C bases divided by the total length of the sequence.\nFor more info about GC content, [see here](https://en.wikipedia.org/wiki/GC-content).\n\nExample\n≡≡≡≡≡≡≡≡≡≡\n\n    julia> gc_content(\"AATG\")\n    0.25\n\n    julia> gc_content(\"cccggg\") * 100\n    100.0\n\n    julia> gc_content(\"ATta\")\n    0.0\n\"\"\"\nfunction gc_content(sequence)\n    # Start with the same code as `question3()` from assignment 2.\n    # only a small modification is necessary to make this work.\nend","category":"page"},{"location":"Assignments/assignment03_code/#Question-5-Incremental-development","page":"Instructions for Assignment03","title":"Question 5 - Incremental development","text":"","category":"section"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"Now that you've learned how to do this, go back and modify the functions defined in questions 1-3 so that they are able to take lowercase arguments. You should not copy the code below this line to modify it, you should modify it in-place.","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"","category":"page"},{"location":"Assignments/assignment03_code/","page":"Instructions for Assignment03","title":"Instructions for Assignment03","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Lessons/Lesson1/#Lesson-1-Getting-started","page":"Lesson docs","title":"Lesson 1 - Getting started","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"(Image: Lecture 1 - slides) (Image: Lecture 1 - date)","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"(Image: Assignment 01 - Invitation) (Image: Assignment 01 - Description) (Image: Assignment 01 - Rendered) (Image: Assignment 01 - Due)","category":"page"},{"location":"Lessons/Lesson1/#Learning-Objectives","page":"Lesson docs","title":"Learning Objectives","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Concepts - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Compare and contrast computer code meaning and syntax\nIdentify common \"algorithms\" used in their daily lives","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Skills - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Navigate their computer's file system using a command line interface\nClone, commit to, and push from a git repository\nUse the julia REPL to do basic arithmatic","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Assignments - This lesson is complete when students have:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Completed the BISC195 entrance survey\nCompleted the BISC195 pretest\nRead the Preface and Chapter 1 of Think Julia\nInstalled visual studio code and julia on their computers\nWindows users should also have installed Windows Terminal\nRun all code examples from Lesson 1 on their own computers","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"This file contains instructions for completing today's lesson. It is written in a language called \"markdown\", which allows plain text to be easily converted into nicely formatted webpages like the one you're looking at now. But we'll come back to this.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"To complete this lesson, follow the instructions below.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nIt is even more important than usual to read and follow instructions when it comes to computers and programming. We will be interacting with our computers using procedural language - that is, language that follows a strict set of procedures. Skipping steps or doing things out of order can lead to unexpected results.","category":"page"},{"location":"Lessons/Lesson1/#first-steps","page":"Lesson docs","title":"Part 1 - First steps","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Most modern computer code is just text that tells a computer what to do. The part that is complicated is that code tends to be:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Literal - the computer can only do exactly what you specifically tell it; it won't try to guess your meaning and it doesn't understand nuance.\nProcedural - computer instructions follow a defined procedure; you must provide all of the commands and you must provide them in the correct order","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Watch this video to get a sense of why this matters so much.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"In this course, we'll be primarily interacting with that computer code as plain text, but there are a bunch of tools that people have built to make that job a bit easier.","category":"page"},{"location":"Lessons/Lesson1/#install-ide","page":"Lesson docs","title":"Installing your IDE","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"One of those tools is an \"Integrated Development Environment\" or \"IDE\". This is basically just a text editor with a bunch of bells and whistles.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"There are a number of different text editors to chose from, but in this course, we're going to use Visual Studio Code","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Click here  and select the correct download for your operating system\n(Image: vscode-download)\nOpen the downloaded file and follow the prompts to install the program","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nIf you prefer to use a different text editor, that's ok, but it's important to be sure it's a plain text editor and not a rich text editor like MS Word.  The files saved by rich text editors contain extraneous information, and are not suitable for programming.Check with Kevin about your choice if you're unsure.","category":"page"},{"location":"Lessons/Lesson1/#install_julia","page":"Lesson docs","title":"Installing julia","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"In this course, we're primarily going to be programming in the julia programming language. Julia is a modern programming language designed for scientific computing.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Go to the julia downloads page  and select the correct download for your operating system.\n(Image: julia-download)\nOpen the downloaded file and follow the prompts to install it.\nMac users, once the .dmg file is opened, you will need to drag the app file into your Applications folder\nWindows users - there will be a .exe file - open it to start the installation.\nOnce the julia application is installed, open it. This should cause a text window to open looking something like this:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.4.0 (2020-03-21)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia>","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Type 2+2 and hit enter, you should see the number 4, and then another julia prompt:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"julia> 2+2\n4\n\njulia>","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"You can close the window in the normal way, or type exit() and hit enter.","category":"page"},{"location":"Lessons/Lesson1/#github_signup","page":"Lesson docs","title":"Sign up for github classroom","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"All assignments will be distributed, turned in and graded through github classroom.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"To use it, you need to sign up for a github account if you don't have one already.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: To Do\nIf you don't have an account already, get one at https://github.com/join.warning: Privacy Note\nYou do not need to use your wellesley.edu email address to create this account, but let Kevin know if you use a different address so that you get credit for your work.If you'd like, you may sign up for a github student discount pack This is not necessary for this course.","category":"page"},{"location":"Lessons/Lesson1/#Part-2-Navigating-the-filesystem-using-the-terminal","page":"Lesson docs","title":"Part 2 - Navigating the filesystem using the terminal","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"You are probably already familiar with your computer's \"filesystem\"[1]. If you've ever looked at files on your Desktop, or opened Finder/Explorer and navigated to your Documents folder, you've been using the file system. Data is stored on your hard drive as a continuous binary sequence (just 1s and 0s) and without a filesystem, it would be impossible to find anything!","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Finder/Explorer are software programs used to interact with your filesystem. The filesystem contains a mix of files, which are blobs of information (eg. a .docx file containing a MS Word doc) and folders, which can contain files as well as other folders. Just to be confusing, what we colloquially call folders are technically called \"directories.\" I will use the terms interchangeably.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"(Image: File system hierarchy)","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"You may not have thought much about how the filesystem is organized, but you probably have an intuitive sense of how this works. Your \"home\"[3] directory contains the Desktop and Documents directories, each of which might contain many other subdirectories and/or files, and each subdirectory may have yet more subdirectories and files and so on.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Finder/Explorer are examples of a graphical user interface (GUI - pronounced \"gooey\"), that is a program that allows you to interact with it visually. However, GUIs are difficult to design and maintain, so most bioinformatics tools are built around \"command line\"[4] or text-based interfaces. The good news is that the organization of the filesystem is the same whether you're interacting with it in a GUI or in the terminal. And once you learn how to use the command line interface, you'll see that it is a powerful way to get a lot done quickly.","category":"page"},{"location":"Lessons/Lesson1/#Open-the-terminal-application","page":"Lesson docs","title":"Open the terminal application","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Mac Users:  ","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Open Applications\nClick Open the Terminal application","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Windows Users:  ","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Click Start -> Programs\nOpen Windows Subsystem for Linux","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"You will be greeted with a white or black box that contains some text, and a cursor next to the dollar symbol $. This is the command prompt.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nUsing the terminal can be quite challenging at first. For one, you cannot interact with text in the same way as you would in a word-processing program like Microsoft Word. In particular, you can't use your mouse to do things like click to move a cursor, or highlight a section of text to be deleted. Instead, you have to use ← and → keys.","category":"page"},{"location":"Lessons/Lesson1/#Walk-around-your-file-system","page":"Lesson docs","title":"Walk around your file system","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Think of your filesystem as a branching network of roads that you can walk along. Each directory is a location that has a path back to its parent directory, may or may not contain objects (files), and may have one or many roads leading to new locations (subdirectories).","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Your present location, referred to as the \"working directory\"[5], is your home folder when you first open the terminal. Let's see where that is.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"In your terminal, type pwd and press enter. This is the \"print working directory\" command.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"$ pwd","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"/home/kevin","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"If you're using a Mac, this probably displayed something like /Users/yourname.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nWhenever you see code blocks in these lessons that start with $, this is a hint that it is a shell command. When copying or typing these commands, do not include the $ (or anything to the left of it). For example, to complete the task above, you should only type pwd, then press enter.$ is referred to as the \"prompt\" or \"command prompt.\" When you enter a command, you may or may not see some output (which will not be preceded by $) and once the command has finished executing, you will see a new prompt.NOTE: These code blocks will often be followed by a block that does not start with a $. This is the expected output; you shouldn't try to copy-past this into your terminal.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Let's take a look around. the ls command is used to list the contents of the directory.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"$ ls","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bin      Documents     R       scratch\nDesktop  Downloads     Public  repos","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Your output will likely look a bit different from mine, but you'll probably see Documents and Desktop, as well as other directories you may recognize.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"compat: Windows Users\nYou may not see any output. This is because the default Ubuntu installation on Windows doesn't have any directories or files in the home folder. But we can actually trick the shell into using the Windows home folder instead. In the following command, replace <yourname> with your Windows username.$ export HOME=/mnt/c/Users/<yourname>\n$ cd ~\n$ pwd\n/mnt/c/Users/<yourname>Now, enter ls again, and you should see the contents of your Windows home folder.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"The ls command can also take a directory as an \"argument.\"[8] We'll talk more about what that means later - for now, just add Desktop to the command, separated by a space","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"$ ls Desktop","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"df.csv  dm.csv  dupes.csv  itp.svg","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Again, your output should look different from mine, but (assuming you store anything on your Desktop), you should see a list of files and directories. If your Desktop is pristine, congratulations! You won't see any output.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"The filesystem is organized hierarchically - at the very top of the hierarchy is the root[2], which you can think of as a folder that contains all other files and folders. On a Mac (and other Unix systems), the root is referred to with a single forward slash (/), While on Windows machines, the root is probably C:\\.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"compat: Windows Users\nWhen you open Windows Subsystem for Linux, you're actually running a fully functional OS with its own file system. As a result, when you type pwd in the terminal, you will see something like /home/yourname, rather than seeing your Windows OS home folder.But WSL has access to your files in a special path, /mnt/c/. If you want to see the files in your Windows Desktop/ directory for example, look in /mnt/c/Users/yourname/Desktop.","category":"page"},{"location":"Lessons/Lesson1/#Moving-around","page":"Lesson docs","title":"Moving around","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Say you are sitting in your room, and you want to give someone directions to Lulu. One way to do this would be to give directions from where you are:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Go out the door,\nGo down the hall to the elevator\n... etc","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"In this case, you're providing a \"relative path\"[6] - the directions only make sense if the person is starting in your room. If they're at the Science Center and they follow your instructions, they will become hopelessly lost.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Alternatively, you could provide directions from a shared point of reference.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Start at the campus gate on the corner of Weston Rd and Central St\nWalk down the path and turn right just past the Child Study Center towards the Botanical Gardens\n... etc","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"In this case, you're providing an \"absolute path\"[7] - no matter where the person is at the time, the directions will make sense.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"An absolute path is great, since the same instructions are useful in most situations, but in many cases, it would be tedious to always have to start instructions from the same location.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"When providing a file path to a unix operating system, you can also provide relative or absolute paths. There are two shared points of reference, your home folder and root, which are specified by ~/ and / respectively when placed at the beginning of the path.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Up above, when we looked at the contents of the Desktop using ls, we provided the relative path from where we were in the home folder. You can tell, because the path did not start with ~/ or /.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"We could have done the same thing using an absolute path:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"$ ls ~/Desktop","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"df.csv  dm.csv  dupes.csv  itp.svg","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"The output here should be the same as what you got above. But what if we're in a different location?","category":"page"},{"location":"Lessons/Lesson1/#cd","page":"Lesson docs","title":"Change directory","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"In order to change the working directory, we use the cd command, giving a path as an argument. For example, to make Desktop the current working directory:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"$ cd ~/Desktop","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"warning: Checking Question\nIs ~/Desktop a relative or absolute path?","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"It's a good idea (in general, but especially while learning) to repeatedly check that the thing you think happened actually happened.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"$ pwd","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"/home/kevin/Desktop","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"$ ls","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"df.csv  dm.csv  dupes.csv  itp.svg","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Notice that with ls, we didn't have to give Desktop as an argument this time. By default, ls lists files in the current working directory.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"warning: Checking Questions\nWhat does pwd stand for?\nWhat does ls stand for?\nWith Desktop as your working directory,  how would you list the contents of your home folder?","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Let's go back to the home folder. Again, we can provide a relative or an absolute path - the absolute path back to home is always ~/, but how do we do the relative path? To walk into subdirectories, we can just provide the name of the subdirectory, but how do we walk \"backwards\", into a parent directory?","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"In unix, parent directories are indicated with ../. So to go back home from /home/kevin/Desktop using a relative path, I would write:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"$ cd ../\n$ pwd","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"/home/kevin","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"It is possible to be more specific about where you want to go after moving up a directory. For example, I could write ../Documents to go up a directory and then move into my Documents folder.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"You can also move up more than just one directory. For example, you can go up two directories with ../../","category":"page"},{"location":"Lessons/Lesson1/#Practice","page":"Lesson docs","title":"Practice","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Practice moving around your file system using cd, and checking where you are using pwd and ls. If you get lost, just enter cd ~/ to get yourself home.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nRather than typing long paths (or even short ones), use the <TAB> key to do auto-completion. For example, with your home folder as your current working directory, type ls De (don't execute), then press <TAB>. This should cause the terminal to fill in ls Desktop automatically.Try typing ls Do, then <TAB>. The first time, nothing happens. Why? Because both Documents and Downloads are valid completions, and the terminal doesn't know which one you want. If you hit <TAB> again, it will display all of the options available. If you add a c, then hit <TAB>, it should complete Documents.As you're navigating around, try to do as little typing as possible. Get into the habit of typing a little bit of a path, then hitting <TAB> (twice if nothing shows up the first time).","category":"page"},{"location":"Lessons/Lesson1/#Manipulating-files-and-directories","page":"Lesson docs","title":"Manipulating files and directories","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Of course, looking around is not the only thing you can do from the terminal. Using the terminal allows you to rapidly view, edit, and otherwise manipulate stuff in your file system.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"danger: Danger\nIt is possible to seriously and irreparably damage your computer using commands from the terminal.Be sure to follow instructions carefully, and be sure to keep your backups current.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"First, let's create a directory for use in this course. You can put it in your home directory, or in Documents, or if you have a directory where your course files usually go, that's fine too.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"I'll assume you're making this in ~/Documents/, but if you want it somewhere else, just modify the path accordingly. the command to make a directory is mkdir <path>.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nIn many examples like this, I will refer to things wrapped in <>, like <path> or <username>. These are stand-ins for some other value. This is a signal that you should replace that text (including the < and > characters) with the appropriate value.","category":"page"},{"location":"Lessons/Lesson1/#directories-and-files","page":"Lesson docs","title":"Create and explore directories and files","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"$ mkdir ~/Documents/bisc195\n$ cd ~/Documents/bisc195\n$ pwd","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"/home/kevin/Documents/bisc195","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Now, copy and execute the following command - don't worry about what it does. (if you really want to know, you can read about it here: \"while loop\"[9])","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ for i in {1..10}; do echo \"This is file #${i}\" > \"file${i}.txt\"; done","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"It should finish very quickly. Let's look at what it did","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ ls","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"file1.txt  file2.txt  file4.txt  file6.txt  file8.txt\nfile10.txt file3.txt  file5.txt  file7.txt  file9.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"The code you executed created 10 files, each of which contains a bit of text. Look at the contents of file1.txt using the head command.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ head file1.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"This is file #1","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"The head command prints the first 10 lines of a file by default, but this file only has 1 line, so that's all that's shown.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"note: Note\nFile names usually have 2 parts - the name and the \"extension.\" The extension, like .txt or .docx, usually tells you something about what the file contains, or how it's encoded, but this is not a requirement. The files above could have been named fileX.whatever, and still have the same content. Usually, it's a good idea to have the extension reflect what's in the file, .txt for text, .jl for julia code etc.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"We can look at multiple files at the same time using the concatenate command (don't forget to use TAB to type less!)","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ cat file1.txt file2.txt file3.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"This is file #1\nThis is file #2\nThis is file #3","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"cat takes any number of files (even just 1!) and prints their entire content to the screen one after another. Be careful - some files are really long, and will go on and on and on and on and...","category":"page"},{"location":"Lessons/Lesson1/#Glob-patterns","page":"Lesson docs","title":"Glob patterns","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"<p>If we want to print the content of all 9 files,\nwe could type them all out,\nbut that would get tedious.\nThere are many useful shortcuts in programming\n(programmers <del>are lazy</del> like efficiency),\none of which is <a href=https://en.wikipedia.org/wiki/Glob_%28programming%29>glob</a> patterns.</p>","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"The most common glob is *, which stands for any number of characters, including none.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"For example,","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ cat *.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"This is file #1\nThis is file #10\nThis is file #2\nThis is file #3\nThis is file #4\nThis is file #5\nThis is file #6\nThis is file #7\nThis is file #8\nThis is file #9","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Here, *.txt means \"anything that ends with .txt\".","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Another glob is ?, which matches any single character.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ cat file?.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"This is file #1\nThis is file #2\nThis is file #3\nThis is file #4\nThis is file #5\nThis is file #6\nThis is file #7\nThis is file #8\nThis is file #9","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Notice that in this example, file10.txt is not included, since in that file name, there are 2 characters between file and .txt.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Finally, you can use brackets to specify specific characters, or ranges of characters:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ cat file[2468].txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"This is file #2\nThis is file #4\nThis is file #6\nThis is file #8","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ cat file[6-8].txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"This is file #6\nThis is file #7\nThis is file #8","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Let's make a new file that contains the content of all of the others. The > character at the end of a command redirects the output of that command into a new file, so we can do:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ cat file*.txt > all_files.txt\nbisc195 $ ls","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"all_files.txt file10.txt    file3.txt     file5.txt     file7.txt     file9.txt\nfile1.txt     file2.txt     file4.txt     file6.txt     file8.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Notice that the cat command in this case didn't print anything to the screen.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"We can check that the right content went into all_files.txt using cat again.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ cat all_files.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"This is file #1\nThis is file #10\nThis is file #2\nThis is file #3\nThis is file #4\nThis is file #5\nThis is file #6\nThis is file #7\nThis is file #8\nThis is file #9","category":"page"},{"location":"Lessons/Lesson1/#move-and-copy-files","page":"Lesson docs","title":"move and copy files","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"We'll use this directory for the rest of this course, but it could use some more organization. First, let's make a directory called lesson1.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Can you remember how to make a new directory? I'm not going to provide the command for this step, but before moving on, you should be able to execute the following command without getting an error:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ ls lesson1/\nbisc195 $","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"When you first create the directory, it will be empty, so ls won't return anything.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"If you see ls: lesson1: No such file or directory, don't move on to the next step.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"danger: Danger\nNeither the mv nor cp command ask before overwriting files, and there's no \"undo\" at the command line. In other words, if you move or copy a file into a directory with file of the same name, the later file will be destroyed and will not be recoverable.Use caution when using these commands outside the context of these lessons.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Once you've created the lesson1/ directory, let's move the text files we've created into it. The mv command takes the form mv <source> <destination>. For example:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ mv file1.txt lesson1/file1.txt\nbisc195 $","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Now,","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ ls lesson1","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"file1.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ ls","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"all_files.txt file2.txt     file4.txt     file6.txt     file8.txt     lesson1\nfile10.txt    file3.txt     file5.txt     file7.txt     file9.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"As you can see, file1.txt has been moved to the lesson1/ subdirectory, and is no longer in the current directory.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"If we don't want to change the name of the file, we can actually just provide a directory as the destination, rather than typing out the entire new path.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ mv file2.txt lesson1/\nbisc195 $ ls lesson1","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"file1.txt file2.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"In this way, we can move multiple files at the same time, separated by spaces, as long as the final argument is a directory:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ mv file3.txt file4.txt file5.txt lesson1/\nbisc195 $ ls lesson1/","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"file1.txt file2.txt file3.txt file4.txt file5.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Remember, ls without an argument shows us the contents of the current directory.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ ls","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"all_files.txt file10.txt    file6.txt     file7.txt     file8.txt     file9.txt     lesson1","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: Practice\nCan you figure out how to move the rest of the file<something>.txt files to the lesson1/ directory using a glob pattern?","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Once you've moved all the text files other than all_files.txt into the lesson1 folder, change the working directory to lesson1 using cd","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nIf you accidentally moved all_files.txt into lesson1/, you can move it back using the relative path ./, which means \"current directory.\" In other words, from the bisc195 directory, you can execute mv lesson1/all_files.txt ./.Alternatively, if you've already done cd lesson1, you can do mv all_files.txt ../. Recall that ../ means \"parent directory.\"","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"The copy command works the same way as mv, except that the original stays where it is.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Check to make sure you're in the lesson1 directory:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"lesson1 $ pwd","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"/home/kevin/Documents/bisc195/lesson1","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"lesson1 $ ls ./","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"file1.txt  file2.txt  file4.txt  file6.txt  file8.txt\nfile10.txt file3.txt  file5.txt  file7.txt  file9.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"lesson1 $ ls ../","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"all_files.txt lesson1","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Let's copy all_files.txt into the current directory using cp:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"lesson1 $ cp ../all_files.txt ./\nlesson1 $ ls","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"all_files.txt file10.txt    file3.txt     file5.txt     file7.txt     file9.txt\nfile1.txt     file2.txt     file4.txt     file6.txt     file8.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"$ ls ../","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"all_files.txt lesson1","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"As you can see, all_files.txt is now present in both the parent bisc195/ directory and the lesson1/ directory.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"tip: Practice\nMake a copy of file1.txt called file1_second.txt in the lesson1/ directory. To check that you've succeeded, execute ls file1*.txt, and the output should be file1.txt file10.txt file1_second.txt","category":"page"},{"location":"Lessons/Lesson1/#Rename-and-remove-files","page":"Lesson docs","title":"Rename and remove files","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"danger: Danger\nOnce again, there is NO undo when using the terminal. I once deleted 10 Gb of sequencing files from a lab server in 2 seconds with a 13 character command.Please use care with these commands.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"We actually don't need 2 copies of the all_files.txt. Let's remove the one in the bisc195 directory.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"lesson1 $ rm ../all_files.txt\nlesson1 $ ls ../","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"lesson1","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Come to think of it - we don't need any of these files. Let's remove them all.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"danger: Danger\nI know, I'm repeating myself. rm combined with glob patterns can do a lot of damage very quickly. Beware!","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Before we do anything, verify we're still in the lesson1 directory using pwd and ls.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Then, remove all of the .txt files in the current directory:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"lesson1 $ rm *.txt\nlesson1 $ ls\nlesson1 $","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"We don't need the lesson1 directory either. First, move to the parent directory (bisc195/) using cd. rm doesn't work on directories:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ rm lesson1","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"rm: lesson1: is a directory","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Instead, use the remove directory command:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"bisc195 $ rmdir lesson1\nbisc195 $ ls\nbisc195 $","category":"page"},{"location":"Lessons/Lesson1/#Summary-of-Terminal-commands","page":"Lesson docs","title":"Summary of Terminal commands","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"cd changes the current working directory\npwd prints (shows) the current working directory\nls <path> lists the contents of a directory\nls without a path argument lists the contents of the current working directory\nls <glob> lists the files/directories matching a pattern (eg ls *.txt)\nuse relative or absolute paths\naboslute paths start with / (root) or ~/ (home)\nrelative paths start with ./, ../ or file and directory names\nmkdir for creating directories\nmv <source(s)> <destination> to move files and directories\ncp <source(s)> <destination> to copy files and directories\nglob patterns can be used to act on many files at once\n* = 0 or more characters (eg. *.txt)\n? = exactly 1 character (eg. file?.txt)\n[] = specific characters or range of characters\neg file[246].txt = file2.txt file4.txt file6.txt\neg file[5-7].txt = file5.txt file6.txt file7.txt\nrm removes files\nrmdir removes (empty) directories","category":"page"},{"location":"Lessons/Lesson1/#git-version-control","page":"Lesson docs","title":"Part 2 - git for version control","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"If you've ever worked on an assignment and ended up with a list of files like","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"assignment1.docx\nassignment1_v2.docx\nassignment1_v2_kevins_comments.docx\nassignment1_v3_fix_final.docx\nassignment1_v3_fix_final_for_real_this_time.docx","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"... you'll understand the importance of version control.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"It goes well beyond naming of course. How can you tell what changed between version 1 and version2? Does version 3 take the comments Kevin made on v2 into account? Is ...fix_final_for_real_this_time really the last version?","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"It's even worse if multiple people are working on the same document. If you and your lab partner are editing a document at the same time, How can you gracefully merge the changes? What if the changes you make and the changes she makes are incompatible?","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Software like Google Docs can address some of these issues, but incompatible changes can still occur. Imagine you're writing an essay about a dog. At the beginning of the essay, you've written","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"The quick brown fox jumped over the lazy dog","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"You and your partner are both refining this epic story at the same time, and further on you write,","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Because of how lazy the dog was, she didn't chase the fox.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"But your partner decided the first line needed some more detail and changes it to","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"The quick brown female fox jumped over the lazy male dog.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"so your pronouns are out of step.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"In writing, a mistake like this might just look silly, but in programming, it can mean your code doesn't run or generates the wrong answer. Even more critically, code often involves many files working together, and keeping track of the versions of multiple files at the same time is necessary.","category":"page"},{"location":"Lessons/Lesson1/#git-is-a-program-for-version-control","page":"Lesson docs","title":"git is a program for version control","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"git is a distributed version control system (DVCS). That is, it helps one keep track of one's code, and the information about versions is distributed among many systems.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"note: Note\nEarly version control systems were centralized - there was a single server that kept track of all of the information about a code repository. Users could \"checkout\" individual files to edit them, and the central repository would lock that file to prevent conflicting changes. This makes it easy to prevent conflicts, but is also a bit impractical.By contrast, git is distributed - each user's system contains the entire revision history, and conflicts between versions are explicitly managed when two different edits to the code are brought together. Don't worry if this isn't super clear at this stage - we'll get into some practical examples in a sec.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"You can think of a git \"repository\" (usually shortened to \"repo\") as a directory with super powers. If you're looking at the directory using Finder or Explorer, it might not look any different, but it's much more powerful. Before we get into that, though, we need to get git installed.","category":"page"},{"location":"Lessons/Lesson1/#Installing-git","page":"Lesson docs","title":"Installing git","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"If you are using Windows Subsystem for linux, or a linux operation system, git should already be installed.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Step 1:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: ToDo: Check if git is installed\nCheck if git is installed by executing git --help in the terminal.$ git --helpusage: git [--version] [--help] [-C <path>] [-c <name>=<value>]\n        [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n        [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n        [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n        <command> [<args>]\n\nThese are common Git commands used in various situations:\n\nstart a working area (see also: git help tutorial)\nclone      Clone a repository into a new directory\ninit       Create an empty Git repository or reinitialize an existing one\n# ... output truncatedIf you're using a Mac, git might not be installed. Executing the command above will probably result in an error message:bash: git: command not found...So you need to install it (if the git help message appeared, you can skip to here).The easiest way to install git on a mac is using homebrew.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Step 1b: ","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: ToDo: Install git\nIf you're using a mac and don't have git installed, enter the following commands into your terminal (excluding the $), then press enter to execute.$ xcode-select --installThis may prompt you to download and install \"command line developer tools\" from the app store. If it does, click install and follow the prompts. When that's finished, and you see the command prompt ($) again, run the following command. Note: this is a case when you should probably use copy/paste.$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"==> This script will install:\n/usr/local/bin/brew\n/usr/local/share/doc/homebrew\n/usr/local/share/man/man1/brew.1\n/usr/local/share/zsh/site-functions/_brew\n/usr/local/etc/bash_completion.d/brew\n/usr/local/Homebrew\n==> The following new directories will be created:\n/usr/local/sbin\n# ...And follow the prompts. If you are asked for your password, use the one you use to log into your computer. Note that you will not see anything appear as you type, just type the password and hit enter.","category":"page"},{"location":"Lessons/Lesson1/#configuring_git","page":"Lesson docs","title":"Configuring git","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"The next step is to tell git your name and email address, so that you are credited with the changes you make to repositories.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Step 2:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: ToDo: Configure git\nEnter the following commands, changing the name and e-mail address to yours.$ git config --global user.name \"Kevin Bonham, PhD\"\n$ git config --global user.email kbonham@wellesley.edu","category":"page"},{"location":"Lessons/Lesson1/#Practice:-Create-your-first-git-repository","page":"Lesson docs","title":"Practice: Create your first git repository","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Step 3:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: ToDo\nIn your terminal, change your working directory to your Documents folder (~/Documents)","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"compat: Windows Users\nYou can perform the following steps either in the Documents/ folder of your linux filesystem found at ~/Documents, or of your Windows filesystem, which is found at /mnt/c/Users/<your_username>/Documents","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Step 4: ","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: ToDo\nNext, create a new directory called my_repo.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"tip: Reminders\ncd is the command for changing working directory\nmkdir is the command for making a directoryLook back at the previous section for more information, and don't worry if you need to keep looking up stuff like this. The stuff you do regularly will become second nature, and the other stuff is always a Google search away.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Step 5: ","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: ToDo: initiate the repo\nNow, change your working directory into the newly created my_repo/ and initialize a git repository using the command git initmy_repo $ git initInitialized empty Git repository in /home/kevin/Documents/my_repo/.git/","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"warning: Checking Questions\nIs the path shown in the output a relative or absolute path?If you use the command ls to list the contents of the current directory, can you see the .git/ directory that was created? Why or why not?","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Step 6: ","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: ToDo\nOpen the folder in your operating system's file system navigator (Finder on a Mac, Explorer in Windows).compat: Windows Users\nIf you created the repository in the linux filesystem, the easiest way to do this is to execute explorer.exe ./ from the command line. See here for more information about how the Windows and Linux filesystems interact.This folder appears empty right now, but in fact, there's a hidden .git folder that will include all of the version information for all of the files that you track.Let's see how this works.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Step 7: ","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: ToDo\nopen the VS Code text editor and create a new file, then save it in your repository directory as fox.txt.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Step 8:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: ToDo\nIn your terminal, list the contents of the directory to be sure the file was created.my_repo $ lsfox.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"When you create new files, git does not track them automatically. Let's see what git sees at the moment:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: ToDo\n$ git statusOn branch master\n\nNo commits yet\n\nUntracked files:\n(use \"git add <file>...\" to include in what will be committed)\n\n    fox.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"So git sees the file exists, but it tells you it's not being tracked.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Step 9:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: ToDo\nLet's fix that (the status message helpfully tells you how):my_repo $ git add fox.txt\nmy_repo $ git statusOn branch master\n\nNo commits yet\n\nChanges to be committed:\n(use \"git rm --cached <file>...\" to unstage)\n\n    new file:   fox.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"The file is now \"staged\"[10] - that is ready to be \"committed.\" In git, a \"commit\"[11] is used to register a specific version of a repository. The current state of all of the tracked files in the repository will be recorded.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"We don't really need to track an empty file, let's add some text to it.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Step 10: ","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: ToDo\nIn VS Code, add the following line to fox.txt and save.The quick fox jumped.Now, back in the terminal, what's the status?$ git statusOn branch master\n\nNo commits yet\n\nChanges to be committed:\n(use \"git rm --cached <file>...\" to unstage)\n\n    new file:   fox.txt\n\nChanges not staged for commit:\n(use \"git add <file>...\" to update what will be committed)\n(use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   fox.txt","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Notice that fox.txt now appears under both \"Changes to be committed\" and \"Changes not staged for commit\".","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Why? Because you initially staged an empty file, and now there's a modified version of the file that has not been staged. You can see the difference between the current state of the file and what's staged using git diff","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"$ git diff fox.txt | cat","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"diff --git a/fox.txt b/fox.txt\nindex e69de29..395235f 100644\n--- a/fox.txt\n+++ b/fox.txt\n@@ -0,0 +1 @@\n+The quick fox jumped.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"The syntax of this output is perhaps a bit confusing, but it's saying that a line was added to fox.txt.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Step 11: ","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Let's go ahead and stage this change, and then make our first commit.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: ToDo\n$ git add fox.txt\n$ git commit -m \"my first commit\"[master (root-commit) b183d56] my first commit\n1 file changed, 1 insertion(+)\ncreate mode 100644 fox.txt$ git statusOn branch master\nnothing to commit, working tree clean","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Congratulations! You have a git repository.","category":"page"},{"location":"Lessons/Lesson1/#Just-keep-committing","page":"Lesson docs","title":"Just keep committing","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: Practice\nTry making some more changes to this file, make some new files, and use git add, git commit, and git status to keep track of those changes.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"danger: Danger\nIf you enter git commit without including a commit message with the -m flag, your terminal may transform into a text editor. If this happens, you may find it difficult to return to the command prompt. Try typing (don't copy/paste) :q! then enter.If this doesn't work, ask for assistance. If Kevin or the TAs are unavailable, you can always close and re-open your terminal.In either case, your commit will be aborted.","category":"page"},{"location":"Lessons/Lesson1/#Using-git-in-this-course","page":"Lesson docs","title":"Using git in this course","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"It might not be clear to you yet why using a version control system is worthwhile. If you don't trust me, the fact that almost every software company uses git (or something similar) should give you some confidence that it's important.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"In any case, this entire course will use git and github.com (a website for managing and collaborating on git repositories). In the first assignment, you'll learn how to do this.","category":"page"},{"location":"Lessons/Lesson1/#Part-3-Running-julia-code","page":"Lesson docs","title":"Part 3 - Running julia code","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"For a lot of this course, we will be using the julia programming language rather than the command line.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"There are a few different ways to run julia code, and this section will get you acquaninted with a couple of them.","category":"page"},{"location":"Lessons/Lesson1/#The-julia-REPL","page":"Lesson docs","title":"The julia REPL","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Open julia, which you should have installed in the first part of this lesson.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Your terminal application should open, running julia:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.4.0 (2020-03-21)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia>","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Technically speaking, this is the julia \"Read, evaluate, print, loop\", or \"REPL\".","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"When you enter text at the julia> prompt, the REPL reads it, evaluates it as julia code, prints[12] the result, and then loops back to the prompt.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Let's try it! Type println(\"Hello, World!\") at the prompt and hit enter.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"println(\"Hello, World!\")","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Don't worry if you don't understand all of the components of this command -  we'll get there.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nAs much as possible, try typing out the commands in these lessons, rather than copy-pasting. It's important to build the muscle memory, and to see the errors that appear when you have typos!For example, what did I miss here:println(Hello, World!)","category":"page"},{"location":"Lessons/Lesson1/#Running-julia-from-the-command-line","page":"Lesson docs","title":"Running julia from the command line","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"You can also execute short snippets of code from the command line. But first, you need to tell the terminal where to look for the julia program.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Mac users, execute the following in your terminal:","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"$ echo 'export PATH=$PATH:/Applications/Julia-1.4.app/Contents/Resources/julia/bin/' >> ~/.bash_profile","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"compat: Windows Users\nYour situation is a bit more complicated. You'll need a separate julia installation for your linux operating system in order to run julia from the command line.I will write up complete instructions soon.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Then restart the terminal. Don't worry if you don't understand what that command is doing - it's not worth it to understand it at this moment. ","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: To Do\nOpen your terminal and enter the following:$ julia -e 'println(\"Hello, World!\")'Hello, World!","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"The -e is a command-line flag that tells julia to just execute the next command as julia code. Note the use of single quotes (') surrounding the command.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"warning: Checking Questions\nWhat happens if you just enter julia at the command line without additional arguments?\nWhat happens if you use double quotes instead of single quotes?  Why do you think that is?","category":"page"},{"location":"Lessons/Lesson1/#Running-julia-scripts","page":"Lesson docs","title":"Running julia scripts","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Our code is often going to be much more complicated than what we've done so far. In those cases, and in order to keep a record of what we're doing, it's useful to put our julia code in a file.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"practice: To Do\nOpen up VS Code, and create a new file called hello.jl.\nType println(\"Hello, World!\") into the file and save it. Note the path to the directory where you saved the file!\nrun:\n$ julia <path_to_directory>/hello.jl\nHello, World!","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"When code is saved into a file that can be run from the commandline, it's called a \"script.\" All of your assigments will be julia code written into files and commited to code repositories using git.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"But it's important to realize that all of this code is the same; it's just text. That text has specific requirements in order to be parsed by the julia interpreter, but whether you run code in the REPL, from the command line, or in a script, it has the same behavior.","category":"page"},{"location":"Lessons/Lesson1/#Key-Terms","page":"Lesson docs","title":"Key Terms","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"[1]: filesystem - a hierarchical organization of files and directories.    Additional reading","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"[2]: root - the top of the filesystem hierarchy. A folder that contains all other files and folders.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"[3]: home - a user's primary folder containing Desktop, Documents, and other user-specific folders and files.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"[4]: command line - a text-based interface for interacting with your computer.    Also referred to as \"terminal\" or \"shell.\"","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"[5]: working directory - the current beginning of relative paths. Equivalent to . or ./","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"[6]: relative path - a path originating at the current working directory","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"[7]: absolute path - a path originating at the home folder (~/) or root /","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"[8]: argument - a value passed to a function to operate on","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"[10]: stage - Files with changes that are ready to be committed.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"[11]: commit - A unique reference to a specific state of a repository.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"[12]: print - In the days before monitors, results would literally be printed on a piece of paper. These days, \"printing\" just means displaying the results.","category":"page"},{"location":"Lessons/Lesson1/#More-info-on-loops","page":"Lesson docs","title":"More info on loops","text":"","category":"section"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"Here's some more information about the loop you ran earlier, but at least for now, it's not necessary to understand it.","category":"page"},{"location":"Lessons/Lesson1/","page":"Lesson docs","title":"Lesson docs","text":"[9]: The codesh   for counter in {1..10}; do echo \"This is file #${counter}\" > \"file${counter}.txt\"; doneis an example of a \"for loop\",   which we'll learn more about later.   This executes code in a loop,   usually with something changing each time.   Here, the code for counter in {1..10} means   \"run this loop for each of the values from 1-10\",   and also provides a counter variable with that value.Inside the loop is a single command:   \"This is file #${counter}\" > \"file${counter}.txt\"\" means   \"write the text 'this is file #1' in a file called file1.txt\"   when the value of counter is 1,   \"write the text 'this is file #2' in a file called file2.txt\"   when the value of counter is 2,   etc.So, in the first cycle of the loop, file1.txt is created.   We then go to the top of the loop, reset the counter,   then we go again - file2.txt is created,   the value of counter is set to 3,   and so on.When file10.txt is created, the  loop is finished (done).   All of this should take less than a second to execute.","category":"page"},{"location":"Lessons/Lesson5/#Lesson-5-Arrays","page":"Lesson docs","title":"Lesson 5 - Arrays","text":"","category":"section"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"(Image: Assignment 05 - Invitation) (Image: Assignment 05 - Description) (Image: Assignment 05 - Rendered) (Image: Assignment 05 - Due)","category":"page"},{"location":"Lessons/Lesson5/#Learning-objectives","page":"Lesson docs","title":"Learning objectives","text":"","category":"section"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"Concepts - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"Compare and contrast Vector, Matrix, and Tuple types for storing ordered data\nDifferentiate between scalar and vector properties of Strings\nExplain the uses and limitations of mutable and immutable types\nRecognize when to use copies or references to data","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"Skills - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"Solve bugs that occur from attempting to access keys or indexes that don't exist\nInitialize and grow Vectors of different types\nUse indexes, ranges, and loops to access subsets of data\nUse string joining and interpolation to compose complex strings","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"Assignments - This lesson is complete when students have:","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"Read Chapter 8 and Chapter 10 of Think Julia.\nRun all code examples from Lesson 5 on their own computers\nCloned the Assignment 5 repository with github classroom.\nCompleted assignment 5 with all tests passing.","category":"page"},{"location":"Lessons/Lesson5/#String-as-Array","page":"Lesson docs","title":"String as Array","text":"","category":"section"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"After reading chapters 8 and 10, you might have noticed that Strings act an awful lot like 1D Arrays (Vectors).","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"Both Strings and Vectors:","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"are ordered collections (Strings are collections of Char, Vectors can have any type)\ncan be indexed and sliced","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"There are many differences, but chief among them is that Vectors are \"mutable\"; that is, we can change the vector by changing individual elements, adding things, or removing things. ","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"v = collect(2:2:10)\n\npush!(v, 42);\npushfirst!(v, -1);\n\nv\n\ndeleteat!(v, 1:2:7);\n\nv","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"Strings, by contrast, are immutable. This might not be obvious, since you can do things like","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"s = \"a string\"\ns = s * \" \" * s","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"It seems like s has changed, but it has not changed by altering the actual object - instead, we constructed an entirely new string and just reassigned s to the new String.","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"warning: Checking Questions\nAssign an empty vector ([]) to the variable v1, then try to push! an Int64, Float64, and String to it. What is the typeof the Vector?\nAssign [1.2, 3, 4] to the variable v2. What is the type of the second elementt (v2[2])? Is that what you expected?\nUse push!() to add the integer 5 to the vector v2. What is the type of v2[4]?\nUse push!() to add the String \"6\" to the vector v2. What happens?","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"Strings themselves are not Vectors, but we can use Vectors of Chars to act like mutable Strings.","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"vc = collect(\"Collect makes vector\")\n\npush!(vc, 's');\njoin(vc)","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"The join() function takes a vector of Strings or Chars and creates a new string.","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nRemember that you can use the help REPL (press ? at the REPL) to view the docstring of join().","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"The join() function can also take optional arguments that can put a String in between each thing that's join()ed,","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"join([\"I\", \"love\", \"the\", \"julia\", \"language!\"], \" 👏 \")","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"and something different between the last two values","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"join([\"Head\", \"shoulders\", \"knees\", \"toes\"], \", \", \", and \")","category":"page"},{"location":"Lessons/Lesson5/#Aliasing","page":"Lesson docs","title":"Aliasing","text":"","category":"section"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"Make sure you've read the section on \"aliasing\" in Think Julia prior to answering the following questions. Even if you already read it, it's worth reading again - this is a constant source of hard-to-find bugs.","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"warning: Checking questions\nFor each of the following questions, first try to predict the answer, then check your answer at the REPL. If you were wrong, try to explain the correct answer.The follwing code assigns 3 variables (a, b, and c) to the float 6.02e24, then reassigns one of them (a) to the float 3.14.\njulia> a = b = c = 6.02e24\n6.02e24\n\njulia> a = 3.14\n3.14\nWhat is the value of b?\nCan you assign c to an Int64?\nThe following code assigns 3 variables (u, v, w) to an empty Integer vector, then push!es the integer 12 to one of them (u)\n```julia julia> u = v = w = Int64[] 0-element Array{Int64,1}julia> push!(u, 12)    1-element Array{Int64,1}:      12    ```What is the value of v?Can you push!() a Float64 to w?\nWhich of the following have the same type as m if m = [1, 4]?\nn = [5,4,3,2,1]\no = Int64[]\np = [\"2\", \"1\"]\n`q = [1.2, 3.4]\nHint: you can check by doing eg n isa (typeof(m))","category":"page"},{"location":"Lessons/Lesson5/#Maps-and-filters-revisited","page":"Lesson docs","title":"Maps and filters revisited","text":"","category":"section"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"In chapter 10 of Think Julia, you are introduced to the concept of \"map\" and \"filter\" functions, which apply a function to each element of a collection, or return only elements that meet a condition respectively.","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"In the chapter, the examples shown are of hand-written map and filter functions written with loops, but these pattterns are so useful that there are map() and filter() functions, each of which take a function as the first argument, and a collection as the second argument.","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"For example,","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"function add3(x)\n    return x + 3\nend\n\nv = map(add3, [1,2,3,4])","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"This is the same as","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"v = Int64[]\n\nfor x in [1,2,3,4]\n    push!(v, add3(x))\nend","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"This type of map() returns a copy of the vector, so the original data will not be altered, but you can also use map!() with the same syntax to mutate the underlying vector.","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"Similarly, one can use filter() (or, to mutate, filter!()) to perform a filtering function.  In this case, the function passed as the first argument must be a boolean function (anything that returns true will be kept).","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"original = [3.14, 8.5, 25.3, 1.0]\n\nfunction lessthan5(x)\n    return x < 5\nend\n\nnewv = filter(lessthan5, original)","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"is the same as","category":"page"},{"location":"Lessons/Lesson5/","page":"Lesson docs","title":"Lesson docs","text":"newv = Float64[]\n\nfor x in original\n    if lessthan5(x)\n        push!(newv, x)\n    end\nend","category":"page"},{"location":"Lessons/Lesson6/#Lesson-6-Miscellany","page":"Lesson docs","title":"Lesson 6 - Miscellany","text":"","category":"section"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"(Image: Assignment 06 - Invitation) (Image: Assignment 06 - Description) (Image: Assignment 06 - Rendered) (Image: Assignment 06 - Due)","category":"page"},{"location":"Lessons/Lesson6/#Learning-objectives","page":"Lesson docs","title":"Learning objectives","text":"","category":"section"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"Concepts - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"Compare and contrast plain text and binary file formats\nSelect the best data structure for different types of data","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"Skills - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"Download files from a url from the command line\nRead files line-by-line and perform actions on each line.","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"Assignments - This lesson is complete when students have:","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"Read Chapter 9 and Chapter 14 of Think Julia.\nRun all code examples from Lesson 6 on their own computers\nCloned the Assignment 6 repository with github classroom.\nCompleted assignment 6 with all tests passing.","category":"page"},{"location":"Lessons/Lesson6/#Beyond-Base-Statistics","page":"Lesson docs","title":"Beyond Base - Statistics","text":"","category":"section"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"All of the functionality we've used thus far has been found in the main julia library, called Base.  But one of the great things about programming languages,  especially open-source ones like julia, is that many people have written a lot of other functionality and shared it with the world in \"packages.\"","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"This functionality is not available out-of-the-box, but you can easily bring this world of additional functions and types into your own code. Some commonly used packages are installed along with julia (these are called the \"standard library\" or \"stdlib\"), and others can be installed using the \"package manager.\"","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"For now, we'll just deal with the packages in stdlib.","category":"page"},{"location":"Lessons/Lesson6/#Bringing-in-other-functions","page":"Lesson docs","title":"Bringing in other functions","text":"","category":"section"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"Julia was designed for numerical computing, but there are a many functions commonly used in statistics that are not available when you first start up julia. For example, it is often useful to calculate the mean, median, and standard deviation of numbers in a vector.","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"julia> v = rand(100); # create vector of random numbers\n\njulia> mean(v)\nERROR: UndefVarError: mean not defined\n\njulia> median(v)\nERROR: UndefVarError: median not defined","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"practice: Practice\nWrite a function my_mean() that calculates the mean of numbers in a Vector. Remember, the mean of a series of numbers is the sum of those numbers divided by the number of values.\nHint: What function tells you how many numbers are in a Vector?\nHint2: Remember that the sum() function can tell you the sum of the numbers in a vector.\nWhat is the mean of v, defined above?","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"Defining my_mean() isn't so hard, but does your function also work on Tuples? What about a matrix (a 2-dimensional array) like m = [1 2; 1 2; 4 5]? And what about my_median() or my_standard_deviation()? You could probably figure out how to define those functions given what you've learned so far, but lots of other people have probably needed this functionality before, and the code is already written and tested.","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"In this case, the functionality is part of the stdlib in the Statistics package. To load the functionality into your own code, we use the keyword using:","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"v = rand(100)","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"using Statistics\n\nmean(v)\n\nmedian(v)\n\nstd(v)","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"warning: Checking Questions\nHow does the result form mean()? from Statistics compare to my_mean()?\nTake a look at the code for the mean function defined in Statistics - it's about 150 lines of code!\nThis function does a lot more than my_mean(), and is probably more efficient. Looking at the docstring for mean() (remember, you can see it by doing ?mean at the REPL), Can you find one thing mean() can do that my_mean() can't?","category":"page"},{"location":"Lessons/Lesson6/#Beyond-Base-other-libraries","page":"Lesson docs","title":"Beyond Base - other libraries","text":"","category":"section"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"In the stdlib, there are also packages for working with dates,  generating random numbers, and for doing linear algebra, among others, but a huge amount of additional functionality can be found in the broader package ecosystem.","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"Installing these packages takes just a little bit of extra effort, and we'll learn about that in future lessons, but it's important to realize that these packages are just like the code you've been writing this whole time. In fact - the lessons you've already completed are packages!","category":"page"},{"location":"Lessons/Lesson6/#Practice,-practice,-practice","page":"Lesson docs","title":"Practice, practice, practice","text":"","category":"section"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"Both chapters from Think Julia this week are practical exercises, but contain a lot of concepts that will be very helpful as we start to more earnestly deal with biological data. Several of the assignment questions are based on the examples in the book. Try to solve the problems in the book before looking at the answers, as struggling through these practice problems will help when it comes time to do the assignment.","category":"page"},{"location":"Lessons/Lesson6/","page":"Lesson docs","title":"Lesson docs","text":"Good luck!","category":"page"},{"location":"Lessons/Lessons/#lesson-index","page":"Lesson index","title":"Lesson index","text":"","category":"section"},{"location":"Lessons/Lessons/","page":"Lesson index","title":"Lesson index","text":"Pages = [\"Lessons/Lesson1.md\",\n         \"Lessons/Lesson2.md\",\n         \"Lessons/Lesson3.md\",\n         \"Lessons/Lesson4.md\",\n         \"Lessons/Lesson5.md\",\n         \"Lessons/Lesson6.md\",\n         \"Lessons/Lesson7.md\",\n         \"Lessons/Lesson8.md\",\n         \"Lessons/Lesson9.md\",\n          ]\nDepth = 1","category":"page"},{"location":"Assignments/Assignment06/#assignment06","page":"Assignment06","title":"Assignment06","text":"","category":"section"},{"location":"Assignments/Assignment06/","page":"Assignment06","title":"Assignment06","text":"(Image: Assignment 06 - Invitation) (Image: Assignment 06 - Description) (Image: Assignment 06 - Rendered) (Image: Assignment 06 - Due)","category":"page"},{"location":"Assignments/Assignment06/#Instructions","page":"Assignment06","title":"Instructions","text":"","category":"section"},{"location":"Assignments/Assignment06/","page":"Assignment06","title":"Assignment06","text":"Click the assignment 6 invitation above, clone the repository, and follow the instructions in src/assignment.jl. Remember, an easier-to-read version of the assignment script can also be viewed by clicking the \"Script\" badge above.","category":"page"},{"location":"Assignments/Assignment06/","page":"Assignment06","title":"Assignment06","text":"Also, recall that you may run the automated tests on your own computer:","category":"page"},{"location":"Assignments/Assignment06/","page":"Assignment06","title":"Assignment06","text":"$ julia --project -e 'using Pkg; Pkg.test()'","category":"page"},{"location":"Assignments/assignment01_code/#Instructions-for-Assignment01","page":"Instructions for Assignment01","title":"Instructions for Assignment01","text":"","category":"section"},{"location":"Assignments/assignment01_code/#Introduction","page":"Instructions for Assignment01","title":"Introduction","text":"","category":"section"},{"location":"Assignments/assignment01_code/","page":"Instructions for Assignment01","title":"Instructions for Assignment01","text":"In this assignment, you will learn how to use github classroom to download, complete, and test your assignments. Make sure you have followed the instructions at <<URL>> to set up your account and join the classroom.","category":"page"},{"location":"Assignments/assignment01_code/#Question-1","page":"Instructions for Assignment01","title":"Question 1","text":"","category":"section"},{"location":"Assignments/assignment01_code/","page":"Instructions for Assignment01","title":"Instructions for Assignment01","text":"Did you complete the instructions for modifying some_variables.jl and some_functions.jl? You should have changed the variables n and a to my_name and my_age respectively, and you should be able to execute julia src/run.jl without errors. Once you can, type yes between the quotations below","category":"page"},{"location":"Assignments/assignment01_code/","page":"Instructions for Assignment01","title":"Instructions for Assignment01","text":"Note: this syntax (question1 = \"yes\") is called \"variable assignment,\" and we'll learn more about this in the next lesson.","category":"page"},{"location":"Assignments/assignment01_code/","page":"Instructions for Assignment01","title":"Instructions for Assignment01","text":"question1 = \"\"","category":"page"},{"location":"Assignments/assignment01_code/#Question-2","page":"Instructions for Assignment01","title":"Question 2","text":"","category":"section"},{"location":"Assignments/assignment01_code/","page":"Instructions for Assignment01","title":"Instructions for Assignment01","text":"What is the shell command to list the contents of the working directory, including hidden files?","category":"page"},{"location":"Assignments/assignment01_code/","page":"Instructions for Assignment01","title":"Instructions for Assignment01","text":"Enter the command between the quotes below.","category":"page"},{"location":"Assignments/assignment01_code/","page":"Instructions for Assignment01","title":"Instructions for Assignment01","text":"question2 = \"\"","category":"page"},{"location":"Assignments/assignment01_code/#Question-3","page":"Instructions for Assignment01","title":"Question 3","text":"","category":"section"},{"location":"Assignments/assignment01_code/","page":"Instructions for Assignment01","title":"Instructions for Assignment01","text":"What is a shell command to create a new directory called \"q3\" in your current working directory?","category":"page"},{"location":"Assignments/assignment01_code/","page":"Instructions for Assignment01","title":"Instructions for Assignment01","text":"Enter the command between the quotes below.","category":"page"},{"location":"Assignments/assignment01_code/","page":"Instructions for Assignment01","title":"Instructions for Assignment01","text":"question3 = \"\"","category":"page"},{"location":"Assignments/assignment01_code/","page":"Instructions for Assignment01","title":"Instructions for Assignment01","text":"","category":"page"},{"location":"Assignments/assignment01_code/","page":"Instructions for Assignment01","title":"Instructions for Assignment01","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Assignments/Assignment04/#assignment04","page":"Assignment04","title":"Assignment04","text":"","category":"section"},{"location":"Assignments/Assignment04/","page":"Assignment04","title":"Assignment04","text":"(Image: Assignment 04 - Invitation) (Image: Assignment 04 - Description) (Image: Assignment 04 - Rendered) (Image: Assignment 04 - Due)","category":"page"},{"location":"Assignments/Assignment04/#Instructions","page":"Assignment04","title":"Instructions","text":"","category":"section"},{"location":"Assignments/Assignment04/","page":"Assignment04","title":"Assignment04","text":"Click the assignment 4 invitation above, clone the repository, and follow the instructions in src/assignment.jl. Remember, an easier-to-read version of the assignment script can also be viewed by clicking the \"Script\" badge above.","category":"page"},{"location":"Assignments/Assignment04/","page":"Assignment04","title":"Assignment04","text":"Also, recall that you may run the automated tests on your own computer:","category":"page"},{"location":"Assignments/Assignment04/","page":"Assignment04","title":"Assignment04","text":"$ julia --project -e 'using Pkg; Pkg.test()'","category":"page"},{"location":"Assignments/assignment04_code/#Instructions-for-Assignment04","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"","category":"section"},{"location":"Assignments/assignment04_code/#Introduction","page":"Instructions for Assignment04","title":"Introduction","text":"","category":"section"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"Note: this file is runnable in its current state, but is incomplete. You can run the file from the command line, or use the VS Code julia extension to run individual lines.","category":"page"},{"location":"Assignments/assignment04_code/#Base-Composition","page":"Instructions for Assignment04","title":"Base Composition","text":"","category":"section"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"We've already seen how to calculate GC content of a DNA sequence but sometimes it might be useful to have more information about the overall base composition. To do this, we can loop through a DNA sequence and count each type of base as it occurs.","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"But first, let's write a \"helper\" function that does some work to make sure that sequences are normalized into a particular form. In particular, we'll make sure they're allways uppercase, are Strings rather than Chars, and don't contain any invalid bases. Note: you can convert a Char to a String with string(c).","category":"page"},{"location":"Assignments/assignment04_code/#Question-1","page":"Instructions for Assignment04","title":"Question 1","text":"","category":"section"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"\"\"\"\n    normalizeDNA(sequence)\n\nNormalizes DNA sequences or bases to uppercase `String`s.\nThrows an error if invalid bases are encountered.\n\nExamples\n≡≡≡≡≡≡≡≡≡≡\n\n    julia> normalizeDNA(\"aaatg\")\n    \"AAATG\"\n\n    julia> normalizeDNA(\"XTG\")\n    ERROR: Invalid base X encountered\n\n    julia> normalizeDNA(5)\n    ERROR: Invalid base 5 encountered\n\n    julia> normalizeDNA('G')\n    \"G\"\n\n    julia> b = normalizeDNA('G');\n\n    julia> typeof(b)\n    String\n\"\"\"\nfunction normalizeDNA(sequence)","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"make sequence into a String\nmake sequence uppercase","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"    for base in sequence\n        if !occursin(base, \"ACGT\")\n            error(\"Invalid base $base encountered\")\n        end\n    end","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"return the normalized sequence","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"end","category":"page"},{"location":"Assignments/assignment04_code/#Question-2","page":"Instructions for Assignment04","title":"Question 2","text":"","category":"section"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"Now, we should be able to set sequence = normalizeDNA(sequence) in all of our other functions, and never worry about the form of the input.","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"The following function returns a Tuple, which is an immutable structure that contains multiple values.","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"\"\"\"\n    basecomposition(sequence)\n\nCounts the number of each type of base\nin a DNA sequence and returns a tuple those counts\nin the order A, C, G, T\n\nExamples\n≡≡≡≡≡≡≡≡≡≡\n\n    julia> basecomposition(\"AATCGGG\")\n    (2, 1, 3, 1)\n\n    julia> basecomposition('C')\n    (0, 1, 0, 0)\n\n    julia> A,C,G,T = basecomposition(\"accgggtttt\")\n    (1, 2, 3, 4)\n\n    julia> A\n    1\n\n    julia> T\n    4\n\n    julia> basecomposition(\"BACCGGGTTTT\")\n    ERROR: Invalid base B encountered\n\"\"\"\nfunction basecomposition(sequence)\n    sequence = normalizeDNA(sequence) # make uppercase string, check invalid bases\n    a = c = g = t = 0 # sets all 4 variables to `0`\n\n    for base in sequence","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"add 1 to each base as it occurs","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"    end\n\n    return a,c,g,t\nend","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"Hint: If all of your base counts are zeros, What's the type of base as you loop through a String?","category":"page"},{"location":"Assignments/assignment04_code/#Question-3","page":"Instructions for Assignment04","title":"Question 3","text":"","category":"section"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"Now let's rewrite our gc_content() function from Assignment03 using our basecomposition() function. This one has the same docstring, but should require substantially less code.","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"\"\"\"\n    gc_content(sequence)\n\nCalculates the GC ratio of a DNA sequence.\nThe GC ratio is the total number of G and C bases divided by the total length of the sequence.\nFor more info about GC content, [see here](https://en.wikipedia.org/wiki/GC-content).\n\nExamples\n≡≡≡≡≡≡≡≡≡≡\n\n    julia> gc_content(\"AATG\")\n    0.25\n\n    julia> gc_content(\"cccggg\") * 100\n    100.0\n\n    julia> gc_content(\"ATta\")\n    0.0\n\n    julia> gc_content(\"ATty\")\n    Error: Invalid base Y encountered\n\"\"\"\nfunction gc_content(sequence)","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"Be sure to use basecomposition() in your answer. Note: Since basecomposition() already calls normalizeDNA, there's no need to call it here.","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"end","category":"page"},{"location":"Assignments/assignment04_code/#Kmer-Composition","page":"Instructions for Assignment04","title":"Kmer Composition","text":"","category":"section"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"Be sure that you've read the sections of Lesson 4 on kmers and dictionaries before attempting the following questions.","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"What we'd like to do is to get a count of all of the unique kmers in a DNA sequence But we can't simply generate all possible kmers (there are too many for even small-ish values of k).","category":"page"},{"location":"Assignments/assignment04_code/#Question-4","page":"Instructions for Assignment04","title":"Question 4","text":"","category":"section"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"Let's think of the process in pseudocode, a plain-language high-level description of what we want to happen. Here, sequence represents some DNA sequence, and k is an integer representing the length of each kmer.","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"make a dictionary to store kmers\nfor each base in sequence\n  get a kmer of the base and the next (k-1) bases\n  make sure the kmer is a valid DNA sequence\n  if this kmer is a key the dictionary\n      add 1 to the value referenced by that kmer\n  otherwise\n      make a new entry in the dictionary with a value of 1","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"\"\"\"\n   kmercount(sequence, k)\n\nFinds all kmers in a sequence,\nreturning a dictionary of those kmers\nand the number of times they appear in the sequence.\n\nExamples\n≡≡≡≡≡≡≡≡≡≡\n\n    julia> kmercount(\"ggg\", 3)\n    Dict{Any,Any} with 1 entry:\n    \"GGG\" => 1\n\n    julia> kmercount(\"ATATATATA\", 4)\n    Dict{Any,Any} with 2 entries:\n    \"TATA\" => 3\n    \"ATAT\" => 3\n\n    julia> kmercount(\"ATATATATAx\", 4)\n    ERROR: Invalid base X encountered\n\n    julia> kmercount(\"A\", 2)\n    ERROR: k must be a positive integer less than the length of the sequence\n\"\"\"\nfunction  kmercount(sequence, k)\n    1 <= k <= length(sequence) || error(\"k must be a positive integer less than the length of the sequence\")\n    kmers = Dict() # initialize dictionary","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"We're going to loop through the string with numerical index, each time grabbing the bases at position i through i+k-1. What is the last index that we should search?","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"    stopindex = 0\n\n    for i in 1:stopindex\n        kmer = \"\" # Change to index the sequence from i to i+k-1\n        kmer = normalizeDNA(kmer)","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"if this kmer is a key the dictionary       add 1 to the value referenced by that kmer   otherwise       make a new entry in the dictionary with a value of 1","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"    end\n    return kmers\nend","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"","category":"page"},{"location":"Assignments/assignment04_code/","page":"Instructions for Assignment04","title":"Instructions for Assignment04","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"EditURL = \"https://github.com/wellesley-bisc195/BISC195.jl/blob/master/docs/literate/lectures/lecture1.jl\"","category":"page"},{"location":"Lectures/lecture1/#lecture1","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"","category":"section"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"Essential Skills For Computational Biology","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"2020-06-08","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"Kevin Bonham, PhD","category":"page"},{"location":"Lectures/lecture1/#Learning-Objectives","page":"Lecture 1 - Getting Started","title":"Learning Objectives","text":"","category":"section"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"After completing this lesson, students will be able to:","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"Navigate their computer's file system using a command line interface\nUse a plain text editor (VS Code) to modify source code\nClone, commit to, and push from a git repository","category":"page"},{"location":"Lectures/lecture1/#What-is-a-computer-program?","page":"Lecture 1 - Getting Started","title":"What is a computer program?","text":"","category":"section"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"function hello(x)\n    println(\"Hello, $(x)!\")\nend","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"hello(\"Students\")","category":"page"},{"location":"Lectures/lecture1/#Programs-are-just-things-and-actions","page":"Lecture 1 - Getting Started","title":"Programs are just things and actions","text":"","category":"section"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"\"Things\" in computer code are data\n\"Actions\" are generally called \"functions\"\nReal life is filled with programs","category":"page"},{"location":"Lectures/lecture1/#Computer-programs-are-just-things-and-actions","page":"Lecture 1 - Getting Started","title":"Computer programs are just things and actions","text":"","category":"section"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"Computer languages are procedural\nComputer languages are literal","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"42 / 2","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"# 5 + \"2\"","category":"page"},{"location":"Lectures/lecture1/#What-are-\"essential\"-skills?","page":"Lecture 1 - Getting Started","title":"What are \"essential\" skills?","text":"","category":"section"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"How do I think about writing a computer program?\nWhen the code I've written has an error, what steps do I take to debug it?\nHow do I keep track of the code that I've written?\nHow do I get help when I'm stuck?","category":"page"},{"location":"Lectures/lecture1/#Course-components","page":"Lecture 1 - Getting Started","title":"Course components","text":"","category":"section"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"Readings and exercises from Think Julia","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"(Image: think julia)","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"Reading and exercises from BISC195 docs","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"(Image: BISC195 website)","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"Problem sets on github classroom","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"(Image: Assignment 01)","category":"page"},{"location":"Lectures/lecture1/#Grading","page":"Lecture 1 - Getting Started","title":"Grading","text":"","category":"section"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"(Image: Assignment 01)","category":"page"},{"location":"Lectures/lecture1/#Assignments","page":"Lecture 1 - Getting Started","title":"Assignments","text":"","category":"section"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"There will be ~10 \"Assignments,\" delivered on github classroom\nAll assignments will be worth the same amount\nAll assignments will have automated \"unit tests\" that will help you complete them\nAll assignments will have \"due dates\" to help keep you up with course material, but you will still get full credit for anything turned in by the end of the term.","category":"page"},{"location":"Lectures/lecture1/#Course-Schedule","page":"Lecture 1 - Getting Started","title":"Course Schedule","text":"","category":"section"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"Dates: June 8 - July 17, 2020","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"Lecture: Tu/Th 10-11am - Reserved for lecture","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"Office hours / lab:","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"M/W 10am-12pm\nTu/Th 1-3pm","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"All students are expected to attend lecture","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"All students should be able to come to at least two lab periods","category":"page"},{"location":"Lectures/lecture1/#Let's-get-started!","page":"Lecture 1 - Getting Started","title":"Let's get started!","text":"","category":"section"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"Course bible: https://wellesley-bisc195.github.io/BISC195.jl/stable/\nLesson 1 - Getting Started","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"","category":"page"},{"location":"Lectures/lecture1/","page":"Lecture 1 - Getting Started","title":"Lecture 1 - Getting Started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Lessons/Lesson3/#Lesson-3-Functions,-conditions,-recursion,-Oh-My!","page":"Lesson docs","title":"Lesson 3 - Functions, conditions, recursion, Oh My!","text":"","category":"section"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"(Image: Assignment 03 - Invitation) (Image: Assignment 03 - Description) (Image: Assignment 03 - Rendered) (Image: Assignment 03 - Due)","category":"page"},{"location":"Lessons/Lesson3/#Learning-objectives","page":"Lesson docs","title":"Learning objectives","text":"","category":"section"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"Concepts - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"Distinguish fruitful functions from void functions\nRecognize boolean values and conditional statements\nRecognize errors resulting resulting from functions expecting boolean values","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"Skills - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"Write boolean functions to check the properties of numerical values\nUse alternative evaluation execute different funuctions depending on input\nRecognize recursive functions, and identify situations in which they might be useful","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"Assignments - This lesson is complete when students have:","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"Read Chapter 5 and Chapter 6 of Think Julia.\nCloned the Assignment 3 repository with github classroom.\nCompleted assignment 3 with all tests passing.\nRun all code examples from Lesson 2 on their own computers","category":"page"},{"location":"Lessons/Lesson3/#Conditional-(boolean)-execution","page":"Lesson docs","title":"Conditional (boolean) execution","text":"","category":"section"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"We can build some useful functions with only the components we've discussed so far, but they would be somewhat limited. Let's work on expanding our repertoire with conditional execution, loops, and recursion.","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"The following sections assume that you have read chapter 5 and chapter 6 in Think Julia. You can do chapter 4 if you like (it lets you play with 🐢's - it's fun!), but that's not required for now.","category":"page"},{"location":"Lessons/Lesson3/#booleans","page":"Lesson docs","title":"Computer logic - Booleans","text":"","category":"section"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"All computers are build on boolean (true/false) logic.  At it's core, the two compoents of computer programs (data and actions) are composed from \"bits\", which are physical objects that can have 2 states, 0 or 1, off or on, false or true, and logical operators.","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"But we don't need to understand the all the details of how this works at a low-level (I certainly don't) to effectively use boolean operations in our code. There are a couple of things to keep in mind.","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"As you read in Think Julia, you can use conditional evalutation (if block) to execute different code under different circumstances.","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"function compliment(base)\n    if base == 'A'\n        return 'T'\n    elseif base == 'T'\n        return 'A'\n    else\n        error(\"Base $base not supported\")\n    end\nend\n\ncompliment('A')","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"julia> compliment('G')\nERROR: Base G not supported\n# ...","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nNotice that we can use variables to insert values in strings using \"interpolation\" with $julia> mystr = \"hello\";\n\njulia> myint = 4;\n\njulia> \"Well, $mystr there. 2 + 2 is $myint\"\n\"Well, hello there. 2 + 2 is 4\"Any arbitrary expression can be interpolated, though in many cases you'll need parentheses:julia> \"2+2 is $(2+2)\"\n\"2+2 is 4\"If you want to include an actual $ sign in a string, you must \"escape\" it with \\, or use a \"raw\" string:julia> println(\"That will be \\$2.50\")\nThat will be $2.50\n\njulia> println(raw\"But I don't have $2.50!'\")\nBut I don't have $2.50!'","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"Here, we're trying to make a function that returns the compliment of a DNA base - that is, the base that would be on the opposite strand.","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"I've entered the complimentary bases for A and T, but we're missing C and G.","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"practice: Practice\nDefine the compliment() function so that it gives the compliment of 'G' and 'C' in addition to 'A' and 'T'.Be sure to use single quotes - the reason will become clear shortly.","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"function compliment(base)\n    if base == 'A'\n        return 'T'\n    elseif base == 'T'\n        return 'A'\n    elseif base == 'G'\n        return 'C'\n    elseif base == 'C'\n        return 'G'\n    else\n        error(\"Base $base not supported\")\n    end\nend","category":"page"},{"location":"Lessons/Lesson3/#Combinatorial-logic","page":"Lesson docs","title":"Combinatorial logic","text":"","category":"section"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"In many cases, we want to test the truth of multiple statements at once. Combining boolean values has rules and precedence, and it's possible to string many of them together.","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"If your statements get too long, it can be challenging to reason about them. For example, what's the truth of the following statement? (remember, || means \"or\" and && means \"and\"):","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"true && false || true && true","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"You might figure it out, but personally, my head hurts. In my experience, though, I am typically only comparing two things, so the rules are easy, or I'm using the same logic opperators throughout (all && or all ||).","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"function basetype(base)\n    if base == 'A' || base == 'G'\n        println(\"That's a purine!\")\n    elseif base == 'T' || base == 'C'\n        println(\"That's a pyrimidine!\")\n    else\n        error(\"Base $base not supported\")\n    end\nend\n\nbasetype('C')","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"Another, likely less obvious place where combinatorial logic is at play is in the behavior of elseif. It's important to remember that the first statement in a conditional block that evaluates to true will be executed, and nothing else will. For example,","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"function oddhalf(num)\n    if iseven(num)\n        println(\"That's an even number, you should get an Int, but you won't.\")\n    elseif num == 42\n        println(\"Life, the Universe, and Everything!\")\n    else\n        println(\"That's an odd number, expect a Float!\")\n    end\n    return num / 2\nend\n\noddhalf(42)","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"Here, there's no way for elseif num == 42 to ever be true, since when num is 42, the iseven(num) gets hit first, and that part of the block is evaluated.","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"note: Note\nThe julia logic operators && and || are \"short circuiting\", which means that if the answer can be known before the right-hand side is evaluated, then the right-hand side won't be evaluated.  This feature can be used to introduce a more concise conditional evaluation than an if block.For example,julia> function verbosehalf(x)\n       iseven(x) && println(\"That's an even number!\")\n       iseven(x) || println(\"That's an odd number!\")\n       x / 2\n   end\nverbosehalf (generic function with 1 method)\n\njulia> verbosehalf(42)\nThat's an even number!\n21.0\n\njulia> verbosehalf(43)\nThat's an odd number!\n21.5When 43 is passed as an argument, iseven(x) evaluates to false. And because false && <anything> is always false, that line just evaluates to false without ever getting to the println() call. But false || <anything> depends on the right hand statement (false || true is different than false || false), the right hand statement must be evaluated.In this case, those lines are equivalent toif iseven(x)\n    println(\"That's an even number!\")\nelse\n    println(\"That's an odd number!\")\nendBut be aware, chaining these short-circuit expressions is NOT like if/elseif/else since, regardless of the outcome of the expression, the following lines are evaluated. Eg, if I try to write the oddhalf() function from above like this:function oddhalf(num)\n    iseven(num) && println(\"That's an even number, you should get an Int, but you won't.\")\n    num == 42 && println(\"Life, the Universe, and Everything!\")\n    println(\"That's an odd number, expect a Float!\")\n    return num / 2\nend\n\noddhalf(42)That's an even number, you should get an Int, but you won't.\nLife, the Universe, and Everything!\nThat's an odd number, expect a Float!\n21.0Not exactly what we wanted...","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"warning: Checking Questions\nReferring back to our compliment function, What happens if you try to pass \"G\" as an argument (note the double quotes)? Can you explain this behavior?\nEvaluate 'G' == \"G\" - did you expect it to be true or false?\nWhat are the types of 'G' and \"G\"?\nUse the || operator to modify the if/elseif statements in your compliment() function from above so that it works with either single-quoted or double-quoted ACGT.\nNote: you should have no more than 3 elseifs in your function, and you should always return a single-quoted version of the compliment.","category":"page"},{"location":"Lessons/Lesson3/#Some-notes-on-recursion","page":"Lesson docs","title":"Some notes on recursion","text":"","category":"section"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"I find recursion difficult to wrap my head around. To be honest, I almost told you skip those sections of chapters 5 and 6. But I think it is valuable to encounter the concept so that you know it exists, even if we don't explore the concept in great detail.","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"In the years I've been programming, I think I've only written 2 recursive functions. But there are areas of biology where they can be quite valuable, and actually easier to understand, especially those involving phylogenetic trees or other graph structures, such as those used in genome assembly.","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"In these cases, we often want to perform and action on a node, and all the children of that node, which are also nodes, also with children... and so on. In fact, this is similar to how many shell programs interact with your file system (which is also like a tree).","category":"page"},{"location":"Lessons/Lesson3/","page":"Lesson docs","title":"Lesson docs","text":"But beyond noting that it has its uses, we won't spend much time on recursive functions in this course.","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"EditURL = \"https://github.com/wellesley-bisc195/BISC195.jl/blob/master/docs/literate/lectures/lecture5.jl\"","category":"page"},{"location":"Lectures/lecture5/#lecture5","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"Essential Skills For Computational Biology","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"2020-06-16","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"Kevin Bonham, PhD","category":"page"},{"location":"Lectures/lecture5/#Scalars-and-Containers","page":"Lecture 5 - Container types and indexing","title":"Scalars and Containers","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"A \"scalar\" is a singular value\nMost of the types you've seen so far are scalars\nEg. Float64, Int64, Bool, Char\nThere are also many container types, which store multiple values\nContainers can usually be accessed by an \"index\"","category":"page"},{"location":"Lectures/lecture5/#A-Tuple-is-a-simple,-ordered-container","page":"Lecture 5 - Container types and indexing","title":"A Tuple is a simple, ordered container","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_tuple = (1, 1.2, \"a string\")","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"Each position has an integer index, 1 for the first position, 2 for the second, and so on","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_tuple[1]","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_tuple[3]","category":"page"},{"location":"Lectures/lecture5/#Attempting-to-access-an-index-that-doesn't-exist-is-an-error","page":"Lecture 5 - Container types and indexing","title":"Attempting to access an index that doesn't exist is an error","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"length(my_tuple)","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_tuple[4]","category":"page"},{"location":"Lectures/lecture5/#A-Vector-is-a-mutable,-ordered-container","page":"Lecture 5 - Container types and indexing","title":"A Vector is a mutable, ordered container","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"Vectors can by easily created with [ and ]","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_vector = [1,3,5,7]","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"Each position has an integer index, 1 for the first position, 2 for the second, and so on","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_vector[1]","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_vector[2]","category":"page"},{"location":"Lectures/lecture5/#Add-to-the-end-of-a-Vector-with-push!()","page":"Lecture 5 - Container types and indexing","title":"Add to the end of a Vector with push!()","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"push!(my_vector, 50);\nnothing #hide","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_vector\n\nother_vector = [] ## an empty vector\nfor i in 1:2:10\n    push!(other_vector, i)\nend","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"other_vector","category":"page"},{"location":"Lectures/lecture5/#Change-the-value-of-a-vector-by-assignment-()","page":"Lecture 5 - Container types and indexing","title":"Change the value of a vector by assignment (=)","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_vector[1] = 42;\nnothing #hide","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_vector","category":"page"},{"location":"Lectures/lecture5/#Index-a-\"slice\"-with-a-range","page":"Lecture 5 - Container types and indexing","title":"Index a \"slice\" with a range","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_vector","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_vector[2:4]","category":"page"},{"location":"Lectures/lecture5/#Attempting-to-access-an-index-that-doesn't-exist-is-an-error-2","page":"Lecture 5 - Container types and indexing","title":"Attempting to access an index that doesn't exist is an error","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"length(my_vector)","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_vector[6]","category":"page"},{"location":"Lectures/lecture5/#Dictionaries-are-containers-with-\"key\"-\"value\"-pairs","page":"Lecture 5 - Container types and indexing","title":"Dictionaries are containers with \"key\" => \"value\" pairs","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"Keys can be any scalar type\nKeys are used as indexes\nValues can be scalars or other containers\nKeys are unordered","category":"page"},{"location":"Lectures/lecture5/#Create-a-Dictionary-with-Dict()","page":"Lecture 5 - Container types and indexing","title":"Create a Dictionary with Dict()","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_dict = Dict(\"key1\"=> 42, \"key2\"=> 1.8, 5=> \"a value\")","category":"page"},{"location":"Lectures/lecture5/#The-keys-are-used-to-index","page":"Lecture 5 - Container types and indexing","title":"The keys are used to index","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_dict[\"key1\"]","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_dict[5]","category":"page"},{"location":"Lectures/lecture5/#Values-can-be-reassigned","page":"Lecture 5 - Container types and indexing","title":"Values can be reassigned","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_dict[\"key1\"] = 3.14","category":"page"},{"location":"Lectures/lecture5/#Attempting-to-access-with-a-key-that-doesn't-exist-is-an-error","page":"Lecture 5 - Container types and indexing","title":"Attempting to access with a key that doesn't exist is an error","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_dict[\"I don't exist\"]","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"But you can assign a new key-value pair","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_dict[\"I don't exist... yet\"] = \"Now I do!\"","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"my_dict[\"I don't exist... yet\"]","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"You can use haskey() (a Boolean function) to see if a dictionary already has a key","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"haskey(my_dict, \"key1\")","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"haskey(my_dict, \"key1000\")","category":"page"},{"location":"Lectures/lecture5/#Questions?","page":"Lecture 5 - Container types and indexing","title":"Questions?","text":"","category":"section"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"","category":"page"},{"location":"Lectures/lecture5/","page":"Lecture 5 - Container types and indexing","title":"Lecture 5 - Container types and indexing","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Assignments/Assignment01/#assignment01","page":"Assignment01","title":"Assignment01","text":"","category":"section"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"(Image: Assignment 01 - Invitation) (Image: Assignment 01 - Description) (Image: Assignment 01 - Assignment script) (Image: Assignment 01 - Due)","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"In this course, assignments are provided through github classroom. This assigment is mostly designed to familiarize you with the process of downloading and completing assignments.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"You should have already signed up for a github account, and joined the classroom. If not, go back and follow the instructions here.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"practice: To Do: Accept the assignment\nStep 1: Accept Assignment01 at this linkWhen you accept the assignment, a git repository is created in your github account.Step 2: Click the link shown on the webpage.(Image: accept assignment)This repository contains a lot more stuff than the repository you made before, but it's still simply a directory with subdirectories and files (plus git superpowers of course). You can click on the directories and files to see their contents.Of course, this repository is stored on github, not your computer. We can fix that by cloneing[1] this repository to your computer.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"practice: To Do: Clone the repo\nStep 3a: Find the repository url on the github page:(Image: clone repo)Step 3b: Copy the url listed, and then in your terminal,$ git clone <url>remote: Enumerating objects: 18, done.\nremote: Counting objects: 100% (18/18), done.\nremote: Compressing objects: 100% (14/14), done.\nremote: Total 18 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (18/18), done.You should now have a new directory called Assignment01-<your_username>/.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"practice: To Do\nStep 4:  First, change your working directory to Assignment01-<your_username>/,  (you remember how to do this right?).Then do git statusAssignment01 $ git statusOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree cleanYou now have a local copy of the \"remote\"[2] repository. By default, the name of this remote is origin.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"note: Note\nIn principal, it is possible to have many remotes and many local copies, but in practice, you'll usually only have one of each. See the url of origin:Assignment01 $ git remote get-url originhttps://github.com/wellesley-bisc195/Assignment01-<your_username>There are many other useful options for git remote. Take a look by executing git remote --help.","category":"page"},{"location":"Assignments/Assignment01/#Explore-the-assignment-with-the-command-line","page":"Assignment01","title":"Explore the assignment with the command line","text":"","category":"section"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"The Assignment01 repository has a directory called src/ (for \"source code\") that contains some files ending in .jl. These files contain some julia code.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"Let's take a look at these files using the terminal:","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"Assignment01 $ ls src","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"Assignment01.jl\t\trun.jl\t\t\tsome_variables.jl\nassignment.jl\t\tsome_functions.jl","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"The cat command prints the contents of a file or files to the screen:","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"Assignment01 $ cat src/some_functions.jl","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"function say_name(name)\n    println(\"Hi there, $(name)!\")\nend\n\nfunction say_age(age)\n    println(\"You are $age years old.\")\nend","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"practice: To Do\nExplore this directory from your terminal using ls and cat. Don't change the working directory,  or if you do, make sure you know how to return.When you're finished, you should be able to execute pwd and see a path that ends with Assignment01-<your-username>","category":"page"},{"location":"Assignments/Assignment01/#Explore-the-assignment-with-VS-code","page":"Assignment01","title":"Explore the assignment with VS code","text":"","category":"section"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"This assignment is just a directory with text files, some of which contain code.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"VS Code, which you should already have installed (if you don't, click here), is designed to explore exactly this kind of project.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"practice: To Do: open the assignment in VS Code\nOpen the VS Code app, then click File -> Open, and open the Assignment01 directory.You'll see the folder structure on the left, and you can click on individual files to open and edit them.This is one of the primary ways you will interact with your code in this course, so get comfortable!","category":"page"},{"location":"Assignments/Assignment01/#Run-the-code","page":"Assignment01","title":"Run the code","text":"","category":"section"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"You can run this code in your terminal:","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"practice: To Do\nAssignment01 $ julia src/run.jlHi there, Kevin!\nYou are 36 years old.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"I'm guessing the output of this program is incorrect - at least for you.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"practice: To Do\nStep 5: Edit the files.Open up src/some_variables.jl in VS code and change the values \"Kevin\" and 36 to be more appropriate. Be sure to save the file, then execute julia src/run.jl again.The output of the program should say your name and your age, rather than mine.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"practice: To Do\nStep 6: Commit the changes.Once you have it working, go ahead and commit the changes. Be sure to use an informative commit message.Check out your commit history to see the changes you've made:Assignment01 $ git log --pretty=oneline | head372e3269256dbce109e4dc0b832e5ce95fca82bd remove old stuff from README\n126a20c75f8a4b19bef85edde9a30dc68f4ec20c add assignment files\nc4a1404ff3fa3aed01936dd474e144694b07efdb Files generated by PkgTemplates\n55dcf2bd2ddae163fbd657273cb3b0ec836e2386 Initial commit","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"You'll see something different, of course, but at the top you should see you recent commits, including the commit messages you wrote.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"So far, this might seem like something that could have been handled with google docs. You only had to change a single file. Let's try something a little more complicated.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"If you open the files in VS Code, you might notice that there are a bunch of connections between the files. For example, in some_functions.jl, I've defined the say_name() and say_age() functions, then in run.jl, one of the first lines is include(\"some_functions.jl\"), and in the main() function, you can see say_name(n) and say_age(a).","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"This is not an accident.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"practice: ToDo\nStep 7: Change the line function say_name(name) in some_functions.jl to function say_the_name(name), save the file, then try to run julia src/run.jl again. What happens?You should get an UndefinedVarError, since run.jl is trying to call something called say_name, but this doesn't exist anymore.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"tip: Tip\nSeeing error messages when you try to run code is a very normal part of programming, and not just when you're learning. A lot of the error message might seem like gobbledygook, but it's worth paying attention. Learning to find the useful information in an error message is incredibly useful when trying to debug your code.Like most of coding, this takes lots of practice, but here are some places to start:Can you find the name of the error?\nAre their parts of the message in plain english? Those parts are usually quite helpful.\nCan you find line numbers/file names pointing to where the problem might be?","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"OK, changing to say_the_name is maybe not worth it. But you've now changed a bunch of things - how do you get back to a working version?","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"In this silly little case, perhaps it's not so hard, but in real-life coding, one often needs to make many changes to many different files. Git makes this easy.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"Assuming you haven't made any new commits since you had a working program, just do","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"Assignment01 $ git reset --hard HEAD","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"HEAD is short-hand for the last commit on this branch. The --hard flag undoes any changes. We'll talk about more complicated uses of git reset later.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"note: Note\nIf you did make commits in the mean time, no problem. Use the git log command from above to see your recent commits, then copy the commit hash (the weird sequence of characters on the left) and use that instead of HEAD in the git reset command.","category":"page"},{"location":"Assignments/Assignment01/#Practice","page":"Assignment01","title":"Practice","text":"","category":"section"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"The variables a and n in some_variables.jl aren't very informative. It's usually a good idea to have variable and function names be \"self documenting\", that is have the name tell you something about what they're for.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"practice: Practice\nChange these variables to my_age and my_name respectively, then fix run.jl so that it uses these new variables.Be sure to save the files and commit your changes when everything is working again (you can also commit intermediate steps).","category":"page"},{"location":"Assignments/Assignment01/#Complete-the-assignment","page":"Assignment01","title":"Complete the assignment","text":"","category":"section"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"The src directory in the Assignment01 repo contains a code file called assignment.jl.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"Open this file in VS Code and follow the instructions in the comments.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"tip: Tip\nIn julia, comment lines start with #, and this allows us to write plain english inside code files.These lines are skipped by the julia parser entirely, even if they contain valid code.The formatting of the comments might look a little weird, it allows me to generate a website from the code that's a bit easier too look at","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"Then use git add and git commit to commit these changes to the repository. You do not have to wait until you're finished to commit changes - There are many different philosophies about what amount of work should be included in a commit, but my philosophy is \"commit early, commit often.\"","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"tip: Tip\nFor files that are already being tracked, you can skip the two-step add and commit. Instead, you can do git commit -a -m \"commit message\" - the -a (or --all) flag automatically adds all previously tracked files.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"Once you've made and committed the requested changes, it's time to push[3] those commits back to the remote. When you cloned this repo, git automatically set the remote tracking branch, so you can just do","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"$ git push","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"Enumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\nDelta compression using up to 12 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (4/4), 409 bytes | 409.00 KiB/s, done.\nTotal 4 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nTo https://github.com/wellesley-bisc195/lesson-2-bisc195tester\n   be920ca..0da312f  master -> master","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"Good work!","category":"page"},{"location":"Assignments/Assignment01/#Key-Terms","page":"Assignment01","title":"Key Terms","text":"","category":"section"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"[1]: clone - A copy of a repository in a different location. Clones can be linked to enable easy syncing of commits.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"[2]: remote - A clone of a repository that exists on a server, rather than your local machine. You can see what remotes are linked to your local repo with git remote.","category":"page"},{"location":"Assignments/Assignment01/","page":"Assignment01","title":"Assignment01","text":"[3]: push - Move commits from a local repo to the remote.","category":"page"},{"location":"Assignments/Assignment09/#assignment09","page":"Assignment09","title":"Assignment 09","text":"","category":"section"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"(Image: Assignment 09 - Description) (Image: Assignment 09 - Due)","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"Let's continue with our analysis of SARS-CoV2 genomes. But before we do - I want to add one more trick to your workflow. In the following code examples the package repo from assignment 8 is called BioinformaticsBISC195.jl, and the analysis repo is called CoVAnalsyis.","category":"page"},{"location":"Assignments/Assignment09/#Using-Revise.jl-during-development","page":"Assignment09","title":"Using Revise.jl during development","text":"","category":"section"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"Typically, when you load a package in julia, that package becomes frozen in amber. That is, if you edit the source code after using the package, it is not easy to get these changes to show up in your julia session without restarting julia.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"For example, start a julia REPL (not in VS Code[1]), change directories to your analysis repo, activate the environment, then load your bioinformatics package.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"julia> cd(\"repos/CoVAnalysis\")\n\n@v1.4> activate .\n\njulia> using BioinformaticsBISC195","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"You should now have access to any functions exported from your package.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"julia> complement('A')\n'T': ASCII/Unicode U+0054 (category Lu: Letter, uppercase)","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"BUT changing anything in your package repo is now blocked. For example, add and export a new function, or change an existing function to do something different (I changed my complement function to always return 42).","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"Even if you repeat using BioinformaticsBISC195, these changes will not be incorporated into your julia session.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"Having to restart your julia session each time you change something would make package development a nightmare, but thankfully there's a better way.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"The Revise.jl package comes to the resuce. It's a bit magical - to be honest, I don't understand how it works, but if you load it (using Revise) before loading your package, then new changes you enter will be incorporated into your running julia session. This package is so widely used that the julia VS code extension loads it by default (which is why I said not to open a REPL in VS Code).","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"Try it out - restart julia, then repeat the above process, but do using Revise right before using BioinformaticsBISC195.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"Note: don't forget to revert the changes you made to your package code.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"With this in mind, you're ready to continue working on coronavirus analysis. As you go forward, put reusable code (eg new functions and types) into your package repository, while analysis-specific code (eg loading files, calculating stats, plots) should go into your analysis repo.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"Don't forget to describe the analyses you're performing in your markdown notebooks.","category":"page"},{"location":"Assignments/Assignment09/#Continuing-CoV-analysis","page":"Assignment09","title":"Continuing CoV analysis","text":"","category":"section"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"In the previous lesson, we calculated the mean and standard deviation of sequence lengths. But mean and standard deviation are really only descriptive if the lengths of the sequences follow a normal distribution.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"The minimum() and maximum() functions take vectors as arguments, and return the smallest and largest values respectively.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"practice: To Do\nUse the minimum() and maximum() functions to find the length of the shortest and longest coronavirus genome in your dataset. Do the values make sense, given the mean length?","category":"page"},{"location":"Assignments/Assignment09/#Identifying-outliers","page":"Assignment09","title":"Identifying outliers","text":"","category":"section"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"In the dataset I downloaded, there are several genomes that are very small - less than 1000 bases when the mean length is closer to 30k bases.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"How did I figure this out? I promise I didn't look at the genome file by hand!","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"One of the easiest ways to get an overview of a dataset is to make some exploratory plots. For this, we can use the Plots.jl package, which makes it very easy to make plots with your data in julia.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"# having previously created a vector with the lengths of my sequences...\nusing Plots\n\nhistogram(seq_lengths)","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"(Image: coronavirus genome lengths)","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"practice: To Do\nUse the Plots package to create a histogram of your coronavirus genome lengths.\nLook at the documentation for the Plots.jl package and see if you can figure out how to remove the legend and add more descriptive axis labels to this plot","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"I'd expect most coronaviruses to have similar length genomes, so anything less than 25k bases is probably a mistake. Take note! Datasets like this are never perfect - it's always worth your time to make sure there aren't errors.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"practice: To Do\nFilter your sequences to remove any that have a length of less than 25k bases. There are a couple of different ways to do this - but keep in mind that, if the headers and sequences from your fasta file are separate, you need to make sure that you remove the headers that correspond to short sequences as well.Some possibilities:Add a filter to your parse_fasta() function. This is not ideal, since it makes the function less generalizable to other problems.\nFind the index of all the sequences that are less than 25K bases long, then remove the items at those indices from the sequence vector and the headers vector. Take a look at the findall() function if you plan to take this path. Warning: if you remove things one by one, you may change the indices of other things in the vector.\nLoop through the sequences, and, if they are long enough, push them into a new vector. Again - be sure to take care of the headers as well.\nFind the index of all of the sequences that are longer than 25k bases, and then take a slice of the original vector. Again, findall() may be useful here.Whatever you do, you should ensure that:The minimum() of the sequence length is actually > 25k bases.\nIf your sequence and header vectors are separate, they should have the same length.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"tip: Tip\nYou can use @assert to make sure that your code did what you expect. @assert followed by a boolean expression will throw an error if the expression is false.julia> @assert 1 == 1\n\njulia> @assert 1 == 2\nERROR: AssertionError: 1 == 2\nStacktrace:\n[1] top-level scope at REPL[13]:1So you might do @assert length(header_vector) == length(sequence_vector) for example.","category":"page"},{"location":"Assignments/Assignment09/#Plot-the-result","page":"Assignment09","title":"Plot the result","text":"","category":"section"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"practice: To Do\nCreate a new histogram that shows the distribution of filtered sequences. It should look something like this:(Image: filtered histogram)","category":"page"},{"location":"Assignments/Assignment09/#Kmer-analysis-of-coronavirus-genomes","page":"Assignment09","title":"Kmer analysis of coronavirus genomes","text":"","category":"section"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"The best way to reason about how closely related two sequences are is to use some \"distance metric\". Sequences that are closer together are inferred to share a common ancestor more recently than sequences that are further apart.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"The most widely-used distance metrics typically come from doing an alignment, but the algorithms for aligning sequences are a bit beyond the scope of this course.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"Instead, we can do a quick-and-dirty analysis by comparing the unique kmers in a sequence. Look back to Assignment04, where you created a function to count the kmers in a sequence.","category":"page"},{"location":"Assignments/Assignment09/#Unique-kmers","page":"Assignment09","title":"Unique kmers","text":"","category":"section"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"Here, we don't need to count the kmers, we just want to know which kmers of a given length are present. You might find it useful to use the Set type, which is an unordered collection of unique elements:","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"julia> my_set = Set([1,1,1,1,1,1,2,2,2,2,2])\nSet{Int64} with 2 elements:\n  2\n  1\n\njulia> push!(my_set, 3)\nSet{Int64} with 3 elements:\n  2\n  3\n  1\n\njulia> push!(my_set, 3) # since 3 is already in it, nothing changes\nSet{Int64} with 3 elements:\n  2\n  3\n  1\n\njulia> union!(my_set, [3,3,3,3,3,4,4,4,4,4,4])\nSet{Int64} with 4 elements:\n  4\n  2\n  3\n  1","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"practice: To Do\nAdd a function to your bioinformatics package that takes 2 arguments - a sequence and an integer (k), and returns all of the unique kmers of length kDo not keep kmers with ambiguous bases (anything other than A, T, G, or C).tip: Tip\nThis function may take a long time to run on all of your genomes. Use a small subset of genomes and/or the ex1.fasta file while you're working on it to make sure it works before trying to run it with all of your genomes.","category":"page"},{"location":"Assignments/Assignment09/#Comparing-unique-kmers","page":"Assignment09","title":"Comparing unique kmers","text":"","category":"section"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"We can now use set theory to compare genomes to one another.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"The \"union\" of two or more sets is the set containing all of the elements found in any set.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"julia> s1 = Set([1,2,3]); s2 = Set([2,3,4]);\n\njulia> union(s1, s2)\nSet{Int64} with 4 elements:\n  4\n  2\n  3\n  1","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"The \"intersection\" of two or more sets is the set of elements that occur in all of the sets.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"julia> intersect(s1, s2)\nSet{Int64} with 2 elements:\n  2\n  3","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"While the \"difference\" refers the the elements of the first set but not in any of the other sets.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"julia> setdiff(s1, s2)\nSet{Int64} with 1 element:\n  1\n\njulia> setdiff(s2, s1)\nSet{Int64} with 1 element:\n  4","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"A distance metric should have the following features:","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"Should be a positive number between 0 and 1\nIdentical things should have a distance of 0\nThings with absolutely no similarity should have a distance of 1","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"To do this with our kmer sets, we can define a distance metric that is 1 - (length of intersection / length of union).","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"Or alternatively, ((length of set1 - set2) + (length of set2 - set1)) / length of union.","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"practice: To Do\nAdd a function to your bioinformatics package that takes two kmer sets and calculates the distance between them.In the next lesson, we'll use the distances between sequences to learn something about the evolution of SARS-related coronaviruses.","category":"page"},{"location":"Assignments/Assignment09/#Completion-Checklist","page":"Assignment09","title":"Completion Checklist","text":"","category":"section"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"[ ] Further description of sequence lengths\n[ ] get the smallest and largest sequence length\n[ ] use histogram() from Plots on sequence lengths\n[ ] Filter sequences to remove anything < 25k basepairs long\n[ ] Create histogram of filtered sequence lengths\n[ ] Unique kmer function that discards kmers with ambiguous bases\n[ ] Kmer set distance function that returns a distance metric","category":"page"},{"location":"Assignments/Assignment09/","page":"Assignment09","title":"Assignment09","text":"[1]: The Julia language extension of VS Code loads Revise.jl automatically if you have it installed","category":"page"},{"location":"Lessons/Lesson7/#Lesson-7-Code-Re-Use:-Packages-and-Environments","page":"Lesson docs","title":"Lesson 7 - Code Re-Use: Packages and Environments","text":"","category":"section"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"(Image: Assignment 07 invitation) (Image: Assignment 07 - Description) (Image: Assignment 07 - Due)","category":"page"},{"location":"Lessons/Lesson7/#Learning-objectives","page":"Lesson docs","title":"Learning objectives","text":"","category":"section"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"Concepts - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"Compare and contrast Base, StdLib, and other package code\nExplain the uses of project environments","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"Skills - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"Use the Package manager Pkg to create environments and install/uninstall packages\nDevelop a package to use in future assignments","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"Assignments - This lesson is complete when students have:","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"Run all code examples from Lesson 7 on their own computers\nCloned the Assignment 7 repository with github classroom.\nCompleted assignment 7 with all tests passing.","category":"page"},{"location":"Lessons/Lesson7/#The-package-ecosystem","page":"Lesson docs","title":"The package ecosystem","text":"","category":"section"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"Julia is an open-source programming language, with a large community of researchers, businesses, and others using the language to develop functionality that suits their interests.","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"Rather than have everyone contribute their code into the main language, which would make the code base enormous, julia (like many programming languages) has a system to develop and distribute \"packages\" - sets of useful functionality that can be installed on your system.","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"A lot of julia packages have been registered, and more are in development. To search through what's available,  you can check out julia hub.","category":"page"},{"location":"Lessons/Lesson7/#Environments","page":"Lesson docs","title":"Environments","text":"","category":"section"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"Julia enables you to have separate \"environments\" in which to run your code. This means that you can have different packages (or different versions of packages) installed on your computer at the same time, without them interacting.","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"In julia, environments are tied to directories. To start a new project, create a new directory, then activate it from the Pkg REPL.","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"julia> mkdir(\"new_project\")\n\"new_project\"\n\njulia> cd(\"new_project/\")\n\n# just type `]` to get the Pkg prompt\n(@v1.4) pkg> activate .\n Activating new environment at `~/new_project/Project.toml`\n\n(new_project) pkg>","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"To add new packges to this environment, use add from the Pkg REPL:","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"(new_project) pkg> add Microbiome\n   Updating registry at `~/.julia/registries/General`\n   Updating git-repo `https://github.com/JuliaRegistries/General.git`\n  Resolving package versions...\n   Updating `~/new_project/Project.toml`\n  [3bd8f0ae] + Microbiome v0.6.4\n   Updating `~/new_project/Manifest.toml`\n  [7d9fca2a] + Arpack v0.4.0\n  [68821587] + Arpack_jll v3.5.0+3\n  # ... etc","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"And remove them with rm","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"(new_project) pkg> rm Microbiome\n   Updating `~/new_project/Project.toml`\n  [3bd8f0ae] - Microbiome v0.6.4\n   Updating `~/new_project/Manifest.toml`\n  [7d9fca2a] - Arpack v0.4.0\n  [68821587] - Arpack_jll v3.5.0+3\n  # ... etc","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"In the same way you could do using Statistics in the previous lesson to get access to the mean() and std() functions defined in that package, adding a package to your project makes the code available in your project when you do using <PackageName>.","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"To leave the Pkg REPL, press <backspace>. You should return to the julia> prompt.","category":"page"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"practice: Practice\nStart a new julia project, and add the package BioSequences using the Pkg REPL. BioSequences is a package designed to work with DNA, RNA, and protein sequences.Packages usually have documentation that explains how to use the package. Sometimes, documentation is very technical, but package documentation is often the best place to start when using new functionality.\nRead the first 3 sections of the BioSequences docs that describe Symbols, Types, and Constructing sequences.\nCreate a DNA sequence, seq, \"ATTGC\". Once constructed, you should be able to do:\njulia> seq\n5nt DNA Sequence:\nATTGC\nPackages don't just provide additional functions, they provide additonal types\njulia> typeof(seq)\nLongSequence{DNAAlphabet{4}}\nA LongSequence from BioSequences, unlike a typical julia String, is mutable. That is, we can add or remove bases just like we can add or remove elements from an array.\njulia> push!(seq, DNA_A)\n6nt DNA Sequence:\nATTGCA\nBioSequences has functionality for getting the reverse complement and counting different base types.\njulia> reverse_complement(seq)\n6nt DNA Sequence:\nTGCAAT\nCan you write a function that gets the GC content of a LongSequence?","category":"page"},{"location":"Lessons/Lesson7/#User-Packages","page":"Lesson docs","title":"User Packages","text":"","category":"section"},{"location":"Lessons/Lesson7/","page":"Lesson docs","title":"Lesson docs","text":"It's quite simple to write your own packages as well, and we'll do that in Assignment07. Let's go!","category":"page"},{"location":"Lessons/Lesson2/#Lesson-2-Data-Types-and-Functions","page":"Lesson docs","title":"Lesson 2 - Data Types and Functions","text":"","category":"section"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"(Image: Lecture 2 - slides) (Image: Lecture 2 - date)","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"(Image: Assignment 02 - Invitation) (Image: Assignment 02 - Description) (Image: Assignment 02 - Rendered) (Image: Assignment 02 - Due)","category":"page"},{"location":"Lessons/Lesson2/#Learning-Objectives","page":"Lesson docs","title":"Learning Objectives","text":"","category":"section"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Concepts - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Distinguish between variables and function arguments\nIdentify functions that operate on or modify data\nCompare and contrast common scalar and container data types\nRecognize errors resulting from using functions on datatypes that do not have appropriate methods","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Skills - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Use a plain text editor (VS Code) to modify source code\nExecute functions on different types of arguments in the julia REPL\nUse print statements and type introspection methods to investigate a data type\nAssign, modify, and copy variables\nUse github and github CI to check answers to homework","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Assignments - This lesson is complete when students have:","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Read Chapter 2 and Chapter 3 of Think Julia.\nCloned the Assignment 2 repository with github classroom.\nCompleted assignment 2 with all tests passing.\nRun all code examples from Lesson 2 on their own computers","category":"page"},{"location":"Lessons/Lesson2/#Data-Types","page":"Lesson docs","title":"Data Types","text":"","category":"section"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Programming can be thought of as consiting of 2 things:","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Data\nOperations on data","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Everything else is just sugar. ","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Before continuing, be sure to read chapter 2 of Think Julia, which introduces you to different kinds of values.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"The next section will expect you do have read  chapter 3, which introduces you to the operations part (functions).","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"These chapters also introduce a number of important concepts like variable assignment, expressions, flow of execution, and arguments. All of these concepts will come up again and again, so if you're still a bit fuzzy on them, that's ok.","category":"page"},{"location":"Lessons/Lesson2/#Practice","page":"Lesson docs","title":"Practice","text":"","category":"section"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"The following examples are intended to reinforce and extend what you've learned. In many cases, they are intended to expose behavior that may be unintuitive, or lead to errors that are worth understanding.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"warning: Checking Questions\nFor each of the following expressions, What is the type of the value that gets returned after execution?\njulia> 1+2\n3\n\njulia> 3 / 2\n1.5\n\njulia> \"42 * 6\"\n\"42 * 6\"\n\njulia> \"42\" * \"6\"\n\"426\"\nAssign each of these values to a different variable (eg my_sum = 1+2). And use the typeof() function to test your answers above. For example   \njulia> x = \"42\" * \"6\"\n\"426\"   \n\njulia> typeof(x)\nString\nWhat is the difference between the following expressions?\njulia> \"AATTCC\"^2\n\"AATTCCAATTCC\"\n\njulia> println(\"AATTCC\"^2)\nAATTCCAATTCC\nWhat happens if you assign each of these expressions to a variable?\nWhat is the difference between Float64 and Int64?\nAre there situations where one is obviously preferred over the other in a math problem?\nWithout evaluating the following expressions, try to guess what the return type will be, Int64 or Float64.\njulia> 1 + 1\n\njulia> 2. - 2.\n\njulia> 3 * 3.\n\njulia> 4. * 4\n\njulia> 5 / 5\n\njulia> \"6\" + \"6.0\"\n\njulia> 1e7 + 1\nNow evaluate them - did you get them right? use typeof() if you're not sure.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nWhen you are working with really big numbers such as 1,000,000, do not include the commas if you want julia to recognize it as an integer. For example, if you were to run this code:julia> 1,000,000\n(1, 0, 0)you can see that julia thinks that 1,000,000 is a group of 3 integers (1, 0, and 0)! Instead, julia allows you to use underscores to break up large integers.julia> 1_000_000\n1000000note: Note\nBut be careful! \"Overflow\" can occur when you try to use giant numbers. Watch:julia> 2^61\n2305843009213693952\n\njulia> 2^62\n4611686018427387904\n\njulia> 2^63\n-9223372036854775808\n\njulia> 2^64\n0What happened? Integers, like all types of data, are stored in memory as bits - sequences of 1s and 0s. In julia, the primary integer type is Int64, which uses 64 bits, 63 of which are used for the magnitude, and one for the sign (+ or -).The value 2^63 would require 65 bits to hold in memory.","category":"page"},{"location":"Lessons/Lesson2/#Functions","page":"Lesson docs","title":"Functions","text":"","category":"section"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Before continuing, be sure to read  chapter 3","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Functions are the parts of a program that do things. Without functions, all you have is data. Actually, most of the time if you want data, you need functions too, unless you're writing literally everything by hand.","category":"page"},{"location":"Lessons/Lesson2/#Recognizing-functions","page":"Lesson docs","title":"Recognizing functions","text":"","category":"section"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Functions are bits of code that do things. Remember the video from Lesson 1? (seriously, go back and watch it if you didn't before). The kids are providing dad a list of functions.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"get(peanut_butter)\nget(jelly)\nget(toast)\nspread(toast, peanut_butter)\nspread(toast, jelly)","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"In julia, it's typically easy to recognize functions because they have the structure:","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"function_name\n(\narguments, separated, by, commas\n)","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"So in the expression","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"println(\"Hello\", \" \", \"world!\")","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"The function_name is println and there are 3 arguments (in this case, all Strings).","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"But functions show up in other ways too.  All of the math you were doing in the previous section was calling functions. In julia, 1 + 1 is just a convenient syntax[1] for +(1,1)","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"+(42,7)\n*(\"BISC\", \"195\")","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"When you do even simple things like type something in the REPL, there are functions being called to evaluate the expression and print the result.","category":"page"},{"location":"Lessons/Lesson2/#[Variables,-arguments,-and-scope]@id-scope","page":"Lesson docs","title":"[Variables, arguments, and scope]@id scope","text":"","category":"section"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"In chapter 3 of Think Julia, you read that variables and parameters are local to functions. ","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"The more technical way to say that is that the inside of functions have their own \"scope\"[2]. This will start to become familiar as you write more code, but it can be confusing at first.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Also potentially confusing is the difference between a variable and an argument. They are similar in various ways, but treating them in the same way, especially naming them the same thing, is an easy way to get yourself confused.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Let's see an example:","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"function newprint(my_arg)\n    println(my_arg, \", students!\")\nend\n\nnewprint(\"Hello there\")","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"This should seem pretty straightforward. The function newprint() takes a single argument, and prints that, appending \", students!\". Inside the function, the value passed as an argument - \"Hello there\" - is passed in everywhere you see my_arg, but my_arg doesn't exist outside the function.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"my_arg","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"We could also have passed a variable as the argument.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"gb = \"Goodbye\"\n\nnewprint(gb)","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Same thing - the variable gb refers to the value \"Goodbye\", and will be substituted everywhere that my_arg lives in the function.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Let's look at a slightly more confusing example.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"some_arg = \"Woah\"\nother_arg = \"Huzzah\"\n\nfunction nelly(some_arg)\n    println(some_arg, \", Nelly!\")\nend\n\nnelly(other_arg)","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"What do you expect? Try it out and see if you're right.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"When we call nelly(other_arg), we're passing the value \"Huzzah\" as the argument. So inside the scope of the function, some_arg is \"Huzzah\".","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"What about some_arg outside of the function?","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"some_arg = \"Woah\"\nother_arg = \"Huzzah\"\n\nfunction nelly(some_arg)\n    println(some_arg, \", Nelly!\")\nend\n\nnelly(other_arg)","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"some_arg","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Here, we're outside of the function scope, so some_arg is \"Woah\".","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"Because of this possibility for confusion, it's usually a good idea to name your function arguments and your variables different things. ","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nJust to reiterate, use different names for variables that refer to data and function arguments.And typically, it's also good practice to make your code \"self-documenting\", which means that the names of functions, variables, and arguments tells you something about what they're used for.","category":"page"},{"location":"Lessons/Lesson2/#Practice-2","page":"Lesson docs","title":"Practice","text":"","category":"section"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"The following examples are intended to reinforce and extend what you've learned. In many cases, they are intended to expose behavior that may be unintuitive, or lead to errors that are worth understanding.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"warning: Checking Questions\nFor each of the expressions ending with # ?, try to predict what the output will be. Then, run them in the REPL and see if you were correct.\njulia> x = 4; # putting `;` prevents the \"print\" part \"read-eval-print-loop\"\n\njulia> x # ?\njulia> y = 2.0;\n\njulia> y + x # ?\njulia> z = y * 2;\n\njulia> z # ?\nWrite a function called multisquare() that\ntakes 2 arguments\nmultiplies them together\nreturns the product raised to the second power\nOnce you've defined the function, you should be able to run\njulia> multisquare(2, 5)\n100\n\njulia> multisquare(\"2\",\"5\")\n\"2525\"\n\njulia> multisquare(1,2.0,3.0)\nERROR: MethodError: no method matching multisquare(::Int64, ::Float64, ::Float64)\n# ... stack trace\n\njulia> multisquare(1,\"2\")\nERROR: MethodError: no method matching *(::Int64, ::String)\n# ... stack trace\nYour output will also contain \"stack traces\"[3] for each error. Don't worry about trying to understand it right now (though it will be very helpful later on).\nBoth multisquare(1,2.0,3.0) and multisquare(1,\"2\") raise MethodErrors. Notice that the former says \"no method matching multisquare(...\", while the later says \"no method matching *(...\" What accounts for this difference?\nEverything we've done here so far is using julia, but the same concepts are applicable on the command line too, just with different syntax.\nWhen you change directories with \n$ cd ~/Desktop \ncd is a function and ~/Desktop is the argument\nCan you identify the function and the argument(s) in the following shell commands?\n$ ls -l ~/Documents\n$ mv ace-ventura1.mov /home/kevin/Movies","category":"page"},{"location":"Lessons/Lesson2/#Key-Terms","page":"Lesson docs","title":"Key Terms","text":"","category":"section"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"[1]: Syntax - The rules that govern how characters in your code files   are translated into instructions that the computer understands.   Julia has one kind of syntax, and the shell has another.   One of my great hopes for this course is that you'll come to recognize that,   though you will learn some syntax for these specific languages,   most of the skills you're learning are transferrable   to learning any programming language.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"[2]: Scope - The region of a program in which assigned variables are available.   In julia, scopes tend to be much more restrictive by default than in other languages.   If you ever get an UndefVarError when you think that you've actually defined the variable,   it's probably not in the right scope.","category":"page"},{"location":"Lessons/Lesson2/","page":"Lesson docs","title":"Lesson docs","text":"[3]: Stack trace - This part of error messages can be super daunting at first,   especially as your programs get more complicated,   but can also be incredibly helpful when debugging.   Essentially, they are displaying the stack diagram   for your program where the error occured,   including pointing to the specific line in the code files   (or REPL block number) where the error occurred.","category":"page"},{"location":"Lessons/Lesson4/#Lesson-4-Loop-d-loop","page":"Lesson docs","title":"Lesson 4 - Loop-d-loop","text":"","category":"section"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"(Image: Assignment 04 - Invitation) (Image: Assignment 04 - Description) (Image: Assignment 04 - Rendered) (Image: Assignment 04 - Due)","category":"page"},{"location":"Lessons/Lesson4/#Learning-objectives","page":"Lesson docs","title":"Learning objectives","text":"","category":"section"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Concepts - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Compare and contrast for loops and while loops\nRecognize the difference between Strings and Chars\nDebug errors that occur from writing infinite loops","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Skills - After completing this lesson, students will be able to:","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Use a for loop to accomplish a task incrementally\nWrite a while loop to repeat code until a condition is met\nStop a loop before it's complete with break","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Assignments - This lesson is complete when students have:","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Read Chapter 4 and Chapter 7 of Think Julia.\nRun all code examples from Lesson 4 on their own computers\nCloned the Assignment 4 repository with github classroom.\nCompleted assignment 4 with all tests passing.","category":"page"},{"location":"Lessons/Lesson4/#Repeating-code-with-loops","page":"Lesson docs","title":"Repeating code with loops","text":"","category":"section"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Writing code is about being lazy - never write more code than you have to! We've already seen that we can use functions to wrap up code that can then be used over and over and over and...","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"But there are plenty more opportunities for re-using code, especially \"loops.\" In the 🐢exercise from Chapter 4 you've seen one use of the for loop.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"for i in 1:5\n    println(i * 3)\nend","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"This loop says, \"For each number, 1 to 5, print that number times 3.\"","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"The way the computer evaluates this is as a loop -","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"i is set to 1, println(i * 3)\nloop back to the top\ni is set to 2, println(i * 3)\nloop back to the top\netc...","category":"page"},{"location":"Lessons/Lesson4/#Using-ranges-in-for-loops","page":"Lesson docs","title":"Using ranges in for loops","text":"","category":"section"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"The 1:5 is a \"range\", it's all of the integers from 1 to 5. In julia, there are many ways to express ranges - and they don't always have to increment by 1!","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"The easiest way to use ranges is with the : syntax, <start>:<optional-increment>:<end>.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"for even_number in 2:2:10\n    println(even_number)\nend\n\nfor half in 1:0.5:3\n    println(half)\nend","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"You can even go backwards!","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"function decrement(n)\n    for d in n:-1:0\n        println(d)\n    end\nend\n\ndecrement(5)","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"For more complicated ranges, we can also use the range() function. Use the REPL help? mode to learn about the range function by typing ? (the prompt should change to help?>), then type range and press enter.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"practice: Practice\nUse the range() function to make a range that goes from 10 to 1000 with 4 entries.You should be able to run:julia> for i in range(#= your code here =#)\n           println(i)\n       end\n10.0\n340.0\n670.0\n1000.0","category":"page"},{"location":"Lessons/Lesson4/#While-loops","page":"Lesson docs","title":"While loops","text":"","category":"section"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"In many cases, the same loop can be written in many different ways. For example,","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"function whiledecrement(n)\n    while n >= 0 # greater than or equal to\n        println(n)\n        n = n - 1\n    end\nend\n\nwhiledecrement(5)","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Where for loops march through a predetermined sequence, while loops continue until a particular condition is met.","category":"page"},{"location":"Lessons/Lesson4/#Loops-and-scope","page":"Lesson docs","title":"Loops and scope","text":"","category":"section"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"In julia, loops have their own scope (we talked about scope back in Lesson 2). Functions also have their own scope, and the way that the scope of loops and the scope of functions interact can be a bit counter-intuitive.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"The best way to get a sense of this is to see some examples.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"i = 5\n\nfor i in 1:3\n    println(i)\nend\n\nprintln(i)","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"function strangeloop(j)\n    k = 1\n    for k in 1:j\n        println(k)\n    end\n    println(k)\nend\n\nk = 5\n\nstrangeloop(k)\n\nprintln(k)","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"m = 10\n\nwhile m > 0\n    print(\"$m \")\n    m = m - 1\nend","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"ERROR: UndefVarError: m not defined","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Wait, what happened to m?","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"while m > 0\n    print(\"$m \")\n    break\nend","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"10","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"This occurs because, though the m in while m > 0 refers to the m assigned to 10, inside the loop, m hasn't been defined. So the expression m - 1 throws an error.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"In a function, things are a bit different:","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"function strangewhile(n)\n    while n > 0\n        print(\"$n \")\n        n = n - 1\n    end\n    println(\"\") # getting a newline\n    println(n)\nend\n\nstrangewhile(10)","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"10 9 8 7 6 5 4 3 2 1\n0","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Loops inside the function have access to the function arguments. Re-assigning n inside the function changes what the function-scope n refers to, but doesn't leak outside the function.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"my_n = 5\n\nstrangewhile(my_n)","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"5 4 3 2 1\n0","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"my_n","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"5","category":"page"},{"location":"Lessons/Lesson4/#Loops-and-Strings-Strings-as-containers","page":"Lesson docs","title":"Loops and Strings - Strings as containers","text":"","category":"section"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Loops can also operate on Strings, which are built from Chars.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"my_string = \"This is a String\";\n\nfor c in my_string\n    println(c)\nend","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"We can also access individual parts of a String by \"indexing\" them. The syntax for this in julia is to put the index in [].","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"We can index with individual numbers...","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"my_string[1]","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"or with ranges...","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"my_string[5:8]","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Or with the special end keyword, which references the last index of a collection.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"lastindex(my_string)\n\nmy_string[end]\n\nmy_string[end-5:end]","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"note: Note\nFor those of you that have learned other programming languages like python or java, you might be confused that the first index is 1 instead of 0. That is because julia uses \"1-based\" indexing.For those of you that have used R or matlab, or for those of you that have otherwise never been conditioned to think of 0 as the first thing, this is probably intuitive.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nNotice that the type of a string indexed by a number (or the pieces of a for loop) is Char,  and the type when indexed by a range is a String:julia> typeof(my_string[1])\nChar\n\njulia> typeof(my_string[1:2])\nStringwarning: Checking Question\nHow can you get a single letter String with indexing?","category":"page"},{"location":"Lessons/Lesson4/#Kmers","page":"Lesson docs","title":"Kmers","text":"","category":"section"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Over the next couple of lessons, we're going to build some functions that help us to find and count all of the \"kmers\" of any length in a sequence, then use them to help us identify DNA sequences from various organisms.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"A \"kmer\" is a sequence (DNA, RNA, or amino acid) of a given length, k. ","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"It is often useful to know the kmer composition of a sequence, given different values of k. For example, the 2mer (kmers with length 2) composition of the sequence \"ATATATC\" is:","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"\"AT\" = 3\n\"TA\" = 2\n\"TC\" = 1","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Note that all reference frames are valid that is, we don't just march along by 2s. So the 3mer composition of the same sequence would be","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"\"ATA\" = 2\n\"TAT\" = 2\n\"ATC\" = 1","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Another way to say this is that the sum of the counts of all kmers in a sequence must be equal to the length of the sequence minus k plus 1.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"warning: Checking questions\nHow many 4mers are in the sequence \"ATTCCGTCA\" (the length of the sequence is 9)\nAll of the 5mers in the above sequence are unique. What are they?  Answer below[1], but don't peek until you've tried it!","category":"page"},{"location":"Lessons/Lesson4/#A-Brief-Introduction-to-Dictionaries","page":"Lesson docs","title":"A Brief Introduction to Dictionaries","text":"","category":"section"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Earlier, when we wanted to calculate GC content of a DNA sequence, we looped through a sequence, counted anything that was a G or C, and then divided that number by the length of the sequence.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"If we want to know the composition of all of the bases in DNA that would be easy to write out by hand, because there are only 4 options. You'll do this for real in Assignment04, but the psedocode might look something like this:","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"set variables a,c,g,t to 0\nfor each base in the sequence\n    if the base is 'A', add one to `a`\n    or if the base is 'C', add one to `c`\n    or if the base is 'G', add one to `g`\n    or if the base is 'T', add one to `t`\nend\nreturn a,c,g,t","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"But doing something like this for proteins, where each amino acid might be one of 20 options, or for kmers where the number of possibilities increases exponentially with k (there are 16 possible DNA 2mers, 64 possible DNA 3mers, etc) that would be untenable. ","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Another option is to use a data structure called a \"Dictionary.\" What follows is a very brief introduction to dictionaries, we'll learn more about them next week. ","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Dictionaries store data as key => value pairs, where the key can by (almost) any type and is used to access or alter the value. This is probably confusing, but may be clearer with some examples.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"my_dict = Dict(\"apples\"=> 4, \"bananas\" => 1, \"strawberries\"=>10)","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"Here, the fruits are the keys, and the Int64s are the values. We can access values using the keys as the index:","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"my_dict[\"bananas\"]\nmy_dict[\"strawberries\"] * 2","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"We can check if a dictionary has a particular key with the boolean function haskey(). ","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"haskey(my_dict, \"apples\")\nhaskey(my_dict, \"kumquat\")","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"If we try to access the dictionary with a key that doesn't exist, we'll get an error.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"julia> my_dict[\"kumquat\"]","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"ERROR: KeyError: key \"kumquat\" not found","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"But we can add new entries to the dictionary if we assign them to new values.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"my_dict[\"kumquat\"] = 0\nhaskey(my_dict, \"kumquat\")","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"And we can update entries by reassigning them, as if they are variables.","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"my_dict[\"apples\"] = my_dict[\"apples\"] + 1;\nmy_dict[\"apples\"]","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"In the assignment, we'll use dictionaries where the keys are the kmers, and the values are the counts. Let's get started!","category":"page"},{"location":"Lessons/Lesson4/","page":"Lesson docs","title":"Lesson docs","text":"[1]: There are 6 kmers of length 4 (9 - 4 + 1),   [\"ATTC\", \"TTCC\", \"TCCG\", \"CCGT\", \"CGTC\", \"GTCA\"]","category":"page"},{"location":"Assignments/Assignments/#assignment-index","page":"Assignment Index","title":"Assignment Index","text":"","category":"section"},{"location":"Assignments/Assignments/#Assignment-1","page":"Assignment Index","title":"Assignment 1","text":"","category":"section"},{"location":"Assignments/Assignments/","page":"Assignment Index","title":"Assignment Index","text":"(Image: Assignment 01 - Invitation) (Image: Assignment 01 - Description) (Image: Assignment 01 - Rendered) (Image: Assignment 01 - Due)","category":"page"},{"location":"Assignments/Assignments/#Assignment-2","page":"Assignment Index","title":"Assignment 2","text":"","category":"section"},{"location":"Assignments/Assignments/","page":"Assignment Index","title":"Assignment Index","text":"(Image: Assignment 02 - Invitation) (Image: Assignment 02 - Description) (Image: Assignment 02 - Rendered) (Image: Assignment 02 - Due)","category":"page"},{"location":"Assignments/Assignments/#Assignment-3","page":"Assignment Index","title":"Assignment 3","text":"","category":"section"},{"location":"Assignments/Assignments/","page":"Assignment Index","title":"Assignment Index","text":"(Image: Assignment 03 - Invitation) (Image: Assignment 03 - Description) (Image: Assignment 03 - Rendered) (Image: Assignment 03 - Due)","category":"page"},{"location":"Assignments/Assignments/#Assignment-4","page":"Assignment Index","title":"Assignment 4","text":"","category":"section"},{"location":"Assignments/Assignments/","page":"Assignment Index","title":"Assignment Index","text":"(Image: Assignment 04 - Invitation) (Image: Assignment 04 - Description) (Image: Assignment 04 - Rendered) (Image: Assignment 04 - Due)","category":"page"},{"location":"Assignments/Assignments/#Assignment-5","page":"Assignment Index","title":"Assignment 5","text":"","category":"section"},{"location":"Assignments/Assignments/","page":"Assignment Index","title":"Assignment Index","text":"(Image: Assignment 05 - Invitation) (Image: Assignment 05 - Description) (Image: Assignment 05 - Rendered) (Image: Assignment 05 - Due)","category":"page"},{"location":"Assignments/Assignments/#Assignment-6","page":"Assignment Index","title":"Assignment 6","text":"","category":"section"},{"location":"Assignments/Assignments/","page":"Assignment Index","title":"Assignment Index","text":"(Image: Assignment 06 - Invitation) (Image: Assignment 06 - Description) (Image: Assignment 06 - Rendered) (Image: Assignment 06 - Due)","category":"page"},{"location":"Assignments/Assignments/#Assignment07","page":"Assignment Index","title":"Assignment07","text":"","category":"section"},{"location":"Assignments/Assignments/","page":"Assignment Index","title":"Assignment Index","text":"(Image: Assignment 07 invitation) (Image: Assignment 07 - Description) (Image: Assignment 07 - Due)","category":"page"},{"location":"Assignments/Assignments/#Assignment08","page":"Assignment Index","title":"Assignment08","text":"","category":"section"},{"location":"Assignments/Assignments/","page":"Assignment Index","title":"Assignment Index","text":"(Image: Assignment 08 - Description) (Image: Assignment 08 - Due)","category":"page"},{"location":"Assignments/Assignments/#Assignment09","page":"Assignment Index","title":"Assignment09","text":"","category":"section"},{"location":"Assignments/Assignments/","page":"Assignment Index","title":"Assignment Index","text":"(Image: Assignment 09 - Description) (Image: Assignment 09 - Due)","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"EditURL = \"https://github.com/wellesley-bisc195/BISC195.jl/blob/master/docs/literate/lectures/lecture6.jl\"","category":"page"},{"location":"Lectures/lecture6/#lecture6","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"","category":"section"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"Essential Skills For Computational Biology","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"2020-06-30","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"Kevin Bonham, PhD","category":"page"},{"location":"Lectures/lecture6/#Strings-contain-patterns","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Strings contain patterns","text":"","category":"section"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"Here's a typical list of files from a DNA sequencing run:","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"sequences = [\n    \"C0005-3F_L001_R1_001.fastq.gz\",\n    \"C0005-3F_L001_R2_001.fastq.gz\",\n    \"C0005-3F_L002_R1_001.fastq.gz\",\n    \"C0005-3F_L002_R2_001.fastq.gz\",\n    \"C0016-3E_L001_R1_001.fastq.gz\",\n    \"C0016-3E_L001_R2_001.fastq.gz\",\n    \"C0016-3E_L002_R1_001.fastq.gz\",\n    \"C0016-3E_L002_R2_001.fastq.gz\",\n]","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"##Simple Patterns:","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"abc matches literal \"abc\"\n[abc] matches any one of a, b, or c\n[^abc] matches any character except a, b, or c\n[a-z0-9] matches any lowercase letter or digit","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"Puzzle: https://regexr.com/57ijc","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"##Repeating Patterns:","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"+ matches 1 or more of a pattern\neg. [0-9]+ matches one or more digits\n* matches 0 or more of a pattern\n? matches 0 or 1 of a pattern\n{N} matches N of a pattern\neg. [abcdr]{4} matches abra and cada, but not abracadabra\nCan also to ranges; {2,4} matches 2 to 4, {3,} is 3 or more","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"Puzzle: https://regexr.com/57ik4","category":"page"},{"location":"Lectures/lecture6/#Special-Patterns:","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Special Patterns:","text":"","category":"section"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":". matches any character, except a new line\n\\w matches any word character (same as [A-Za-z0-9_])\n\\d matches any digit (same as [0-9])\n\\s matches any whitespace (space, tab, newline, etc)\nIf you need to match a character that is otherwise special, \"escape\" it with \\\neg. to match a literal period, \\.","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"Puzzles:","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"https://regexr.com/57ikd\nhttps://regexr.com/57ikg","category":"page"},{"location":"Lectures/lecture6/#More-fun-with-regular-Expressions","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"More fun with regular Expressions","text":"","category":"section"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"Use the regexr cheatsheet (or find another one - they're all over)\nThere are a lot more patterns that can be used\nhttps://regexcrossword.com/\nMy most complicated regex to date:","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"^([`~]{3,})(?:(?:(?:\\\\{|\\\\{\\\\.|)(julia)(?:;|))|(@(docs|autodocs|ref|meta|index|content|example|repl|eval|setup|raw)))\\\\s*(?:.*?)(\\\\}|)\\\\s*$","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\" Now they have two problems.","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"(Image: xkcd regex)","category":"page"},{"location":"Lectures/lecture6/#Regular-expressions-in-julia","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Regular expressions in julia","text":"","category":"section"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"for seq in sequences\n    m = match(r\"^([MC]\\d+\\-[0-9][EF])_L00.+fastq\\.gz\", seq)\n    println(m.captures[1])\nend","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"","category":"page"},{"location":"Lectures/lecture6/","page":"Lecture 6 - Puzzle time! (Regular Expressions)","title":"Lecture 6 - Puzzle time! (Regular Expressions)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Lectures/lecture2/","page":"Lecture 2 - Types and Functions","title":"Lecture 2 - Types and Functions","text":"EditURL = \"https://github.com/wellesley-bisc195/BISC195.jl/blob/master/docs/literate/lectures/lecture2.jl\"","category":"page"},{"location":"Lectures/lecture2/#lecture2","page":"Lecture 2 - Types and Functions","title":"Lecture 2 - Types and Functions","text":"","category":"section"},{"location":"Lectures/lecture2/","page":"Lecture 2 - Types and Functions","title":"Lecture 2 - Types and Functions","text":"Essential Skills For Computational Biology","category":"page"},{"location":"Lectures/lecture2/","page":"Lecture 2 - Types and Functions","title":"Lecture 2 - Types and Functions","text":"2020-06-08","category":"page"},{"location":"Lectures/lecture2/","page":"Lecture 2 - Types and Functions","title":"Lecture 2 - Types and Functions","text":"Kevin Bonham, PhD","category":"page"},{"location":"Lectures/lecture2/#A-program-is-data-and-operations-on-data","page":"Lecture 2 - Types and Functions","title":"A program is data and operations on data","text":"","category":"section"},{"location":"Lectures/lecture2/","page":"Lecture 2 - Types and Functions","title":"Lecture 2 - Types and Functions","text":"chromosomes = 23 # this is data\n\nfunction diploid(n)\n    return n * 2 # this is an operation\nend","category":"page"},{"location":"Lectures/lecture2/","page":"Lecture 2 - Types and Functions","title":"Lecture 2 - Types and Functions","text":"diploid(chromosomes) # this is a program\n\n##nb # %% A slide [markdown] {\"slideshow\": {\"slide_type\": \"subslide\"}}","category":"page"},{"location":"Lectures/lecture2/#How-to-run-a-julia-program","page":"Lecture 2 - Types and Functions","title":"How to run a julia program","text":"","category":"section"},{"location":"Lectures/lecture2/","page":"Lecture 2 - Types and Functions","title":"Lecture 2 - Types and Functions","text":"From the REPL\nFrom a script (Live demo)\nFrom a file inside VS Code (Live demo)","category":"page"},{"location":"Lectures/lecture2/","page":"Lecture 2 - Types and Functions","title":"Lecture 2 - Types and Functions","text":"Placeholder for video link","category":"page"},{"location":"Lectures/lecture2/","page":"Lecture 2 - Types and Functions","title":"Lecture 2 - Types and Functions","text":"","category":"page"},{"location":"Lectures/lecture2/","page":"Lecture 2 - Types and Functions","title":"Lecture 2 - Types and Functions","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Lessons/0_windows/#Part-0:-Windows-users-need-Windows-Subsystem-for-Linux-(WSL)","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"","category":"section"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"If you are working on a Mac, you can skip this section and go straight to Getting started with the terminal. <!– TODO: Add link –>","category":"page"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"The inner guts of the Windows operating system are different than those of Mac and Linux. The bad news is, many computational biology tools expect the later, a so-called \"Unix\" environment. The good news is that Windows 10 has a way to run a Unix environment side-by-side with Windows.","category":"page"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"compat: Windows Users\nThroughout this course, you will see boxes like this labeled \"Windows Users.\" These contain information about ways in which Windows is different from Unix operating systems. Pay careful attention to these boxes, since other instructions may be unclear if you don't modify them accordingly.","category":"page"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"Much of this guide was cribbed from Michael Treat's guide, which has a lot more information and a video that you may find useful.","category":"page"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"Before you begin check to make sure that you have the most recent version of Windows 10.","category":"page"},{"location":"Lessons/0_windows/#Step-0.1-Enable-the-WSL-Feature-through-Windows.","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Step 0.1 - Enable the WSL Feature through Windows.","text":"","category":"section"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"Right click on the start menu and click on Settings.\nIn the Search box, type Turn Windows Features On Or Off and click on the item that populates in the list.\nA window will pop up with a list of folders with checkboxes next to them. Scroll down and check the box for Windows Subsystem for Linux.","category":"page"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"This will install the needed files. Follow any directions that pop up and restart when asked.","category":"page"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"This guide might not open after restart, so be sure to make note of the url or star this repo.","category":"page"},{"location":"Lessons/0_windows/#Step-0.2-Install-the-Ubuntu-app-from-the-Windows-Store.","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Step 0.2 - Install the Ubuntu app from the Windows Store.","text":"","category":"section"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"Click here to go to Microsoft store and install the Ubuntu App\nFollow the on-screen prompts to install the app.\nWhen the app is ready, the button that said 'Install' will change to say 'Launch'. Click Launch. This will start the Ubuntu installation. This installation only happens the first time the app is launched. It's the actual Ubuntu (or Linux) OS installing and mounting to your Windows file system.","category":"page"},{"location":"Lessons/0_windows/#Step-0.3-Finish-Installing-the-Ubuntu-App.","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Step 0.3 - Finish Installing the Ubuntu App.","text":"","category":"section"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"It will ask you to enter a username. This will be the root / admin user for the Ubuntu FS. Do not include spaces in your username.\nIt will then ask you to enter and confirm a password. Also note that it will protect your password by not displaying it to the screen when you type, but it is registering your key strokes.","category":"page"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"note: Note\nSecurity is important at all levels,  so even though you have to use this password often,  don't be tempted to make it too simple.  Essentially all of your Window's files can be viewed and modified by this user,  so keep that password safe and strong.Also be careful not to mess with any permissions!  If you think you need to do that to complete this setup,  then stop and reach out to me.  You should NOT have to worry about any permissions with this,  and if you do get stuck there then I need to know so I can help troubleshoot you through this,  or so we know we need to update this guide.","category":"page"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"Finally, the prompt will change and you will be on a command line. Type pwd and press enter to see where you currently are in the FS. you should be at /home/<your_username>. This is the root level of your Ubuntu user (more on that later).","category":"page"},{"location":"Lessons/0_windows/#Step-0.4-Updating-Default-Software.","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Step 0.4 - Updating Default Software.","text":"","category":"section"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"You will need to run a quick couple commands in order to run the software updater. The Ubuntu OS is shipped with a ton of built-in software, but those libraries may have had more recent updates come out since the OS was shipped. Updating this now is quick and will help you stay current and protected.","category":"page"},{"location":"Lessons/0_windows/","page":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","title":"Part 0: Windows users need Windows Subsystem for Linux (WSL)","text":"In the terminal, type sudo apt-get update and press enter. (you may need to enter your password)\nWhat does sudo apt-get update do?\nOnce that is complete, execute sudo apt-get upgrade. Press y when prompted.\nWhat does sudo apt-get upgrade do?\nOnce that is done, type sudo apt autoremove. This will remove any packages that are no longer needed.\nWhat does sudo apt-get autoremove do?","category":"page"},{"location":"Assignments/assignment06_code/#Instructions-for-Assignment06","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"","category":"section"},{"location":"Assignments/assignment06_code/#Introduction","page":"Instructions for Assignment06","title":"Introduction","text":"","category":"section"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"Note: this file is runnable in its current state, but is incomplete. You can run the file from the command line, or use the VS Code julia extension to run individual lines.","category":"page"},{"location":"Assignments/assignment06_code/#Question-1-Reading-FASTA-files","page":"Instructions for Assignment06","title":"Question 1 - Reading FASTA files","text":"","category":"section"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"A common way to interact with biological sequence data is in a format called FASTA. This is a very simple format, where each \"record\" (sequence) contains:","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"A \"header\" line, always starting with >, that contains a description of the sequence\nThe sequence, which can be split across multiple lines","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"For example, in the data/ directory of this assignment, there is a file called cov2_genomes.fasta, which contains some genome sequences of Sars-CoV2 isolated from humans in the last month. Use the shell to take a look at the first 10 lines (head) of the file.","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"Now, let's work on building a julia function to help us use this file.","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"\"\"\"\n    count_records(path)\n\nGiven a path to a `fasta` file,\ncounts and returns the number of records it contains.\n\nExample\n≡≡≡≡≡≡≡≡≡\n    julia> count_records(\"data/cov2_genomes.fasta\")\n    10\n\"\"\"\nfunction count_records(path)\n    # Your code here.\nend","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"Hint - If you're having trouble, the easiest thing to do is probably to count lines that start with >.","category":"page"},{"location":"Assignments/assignment06_code/#Question-2-Split-the-headers","page":"Instructions for Assignment06","title":"Question 2 - Split the headers","text":"","category":"section"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"It's nice to know the number of records the file contains, but it's more useful to actually be able to read and store those records.","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"Let's look again at the headers for these sequences. This can be accomplished from the terminal using grep. The simplest way to use grep is with 2 arguments - the first argument specifies a pattern to look for, and the second is the path to a file (or group of files).","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"grep will then print to the screen all of the lines from the file that match that pattern. To see all of the header lines, for example,","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"$ grep '>' data/cov2_genomes.fasta","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"Each header has 3 components, separated by | Write a function that divides the header into these 3 components, and returns them as a tuple.","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"\"\"\"\n    fasta_header(header)\n\nDivides a fasta header into its component parts,\nremoving any leading or trailing spaces.\n\nExample\n≡≡≡≡≡≡≡≡≡\n    julia> fasta_header(\">M0002 |China|Homo sapiens\")\n    (\"M0002\", \"China\", \"Homo sapiens\")\n\n    julia> fasta_header(\"AAATTC\")\n    Error: Invalid header (headers must start with '>')\n\n    julia> fasta_header(\">Another sequence\")\n    (\"Another sequence\",)\n\n    julia> fasta_header(\">headers| can | have| any number | of | info blocks\")\n    (\"headers\", \"can\", \"have\", \"any number\", \"of\", \"info blocks\")\n\"\"\"\nfunction fasta_header(header)\n    startswith(header, '>') || error(\"Invalid header (headers must start with '>')\")\n\n    # Your code here\nend","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"A couple of things to note about this function if you're strugling:","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"Notice that, even though each header must start with a >, the first item in the returned Tuple should not\nThe return item should always be a Tuple, even if there's only 1 item\nThe split() function can divide a String by a delimeter.\nYou may need to do some searching on the internet.","category":"page"},{"location":"Assignments/assignment06_code/#Question-3-parse-the-file","page":"Instructions for Assignment06","title":"Question 3 - parse the file","text":"","category":"section"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"Alright - let's actually parse the file. For now, the easiest thing to do is to return two vectors, one containing the parsed identifiers as tuples, and one containing the sequences as strings.","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"One thing to keep in mind is that the sequences in a fasta file can be spread out over multipl lines, but they'll be much easier to work with as a single string, so your function should have a way to join multiple lines (remember the join() function?).","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"I've included a few example files in the \"data\" directory with some example files to test your functions on. The examples in the docstring below assume that your working directory is the assignment directory.","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"\"\"\"\n    function parse_fasta(path)\n\nReads a fasta-formated file and returns 2 vectors,\none containing parsed headers,\nthe other containing the entire seqence as a `String`.\n\nNote: function does not validate DNA sequences for correctness.\n\nExample\n≡≡≡≡≡≡≡≡≡\n    julia> ex1 = parse_fasta(\"data/ex1.fasta\");\n\n    julia> ex1 isa Tuple\n    true\n\n    julia> ex1[1]\n    2-element Array{Tuple{String,String},1}:\n      (\"ex1.1\", \"easy\")\n      (\"ex1.2\", \"multiline\")\n\n    julia> ex1[2]\n    2-element Array{String,1}:\n    \"AATTATAGC\"\n    \"CGCCCCCCAGTCGGATT\"\n\n    julia> ex2 = parse_fasta(\"data/ex2.fasta\");\n\n    julia> ex2[1]\n    4-element Array{Tuple{String,String},1}:\n      (\"ex2.1\", \"oneper\")\n      (\"ex2.2\", \"wrong\")\n      (\"ex2.3\", \"wronger\")\n      (\"ex2.4\", \"wrongest\")\n\n    julia> ex2[2]\n    4-element Array{String,1}:\n      \"ATCCGT\"\n      \"ATCGTGGaact\"\n      \"ATCGTGGaact\"\n      \"this isn't a dna string,but parse it anyway\"\n\"\"\"\nfunction parse_fasta(path)\n    # Think through the components you need\n    # Does it make sense to define any containers at the beginning?\n    # How will you loop through the file?\n    # What do you need to get from each line?\nend","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"Tips:","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"Build the function in parts\nfirst, see if you can build the vector of headers, ignoring the sequences\nnext, see if you can collect the sequences, even if they're not joined together properly\nWork on pieces of the function in the REPL. Make sure each expression does what you think it does.\nFor example, if you make a for loop to go through each line of the file, add println() statements to check the value of each variable in each loop.","category":"page"},{"location":"Assignments/assignment06_code/#Question-4-Sequence-Statistics","page":"Instructions for Assignment06","title":"Question 4 - Sequence Statistics","text":"","category":"section"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"We now have most of the pieces necessary to get some summary statistics of CoV2 genomes. Note: You may want to grab some code from previous assignments.","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"Calculate the mean sequence length and standard deviation of the CoV2 geneomes in data/cov2_genomes.fasta.","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"# helper code goes here\n\nmean_cov2_length = 0.0\nstd_cov2_length = 0.0","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"Calculate the mean and standard deviation of GC content of the CoV2 genomes in data/cov2_genomes.fasta. GC content should be a number between 0 and 1. Note: if you already parsed the fasta file above and assigned the results to variables, there's no need to re-parse it.","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"# helper code goes here\n\nmean_cov2_gc = 0.0\nstd_cov2_gc = 0.0","category":"page"},{"location":"Assignments/assignment06_code/#Bonus-Question","page":"Instructions for Assignment06","title":"Bonus Question","text":"","category":"section"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"Write a function that will read any proper fasta file and returns a tuple with the mean and standard deviation of the sequence length and gc content.","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"","category":"page"},{"location":"Assignments/assignment06_code/","page":"Instructions for Assignment06","title":"Instructions for Assignment06","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Lessons/Lesson9/#Lesson-9-Types-and-methods","page":"Lesson docs","title":"Lesson 9 - Types and methods","text":"","category":"section"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"(Image: Assignment 09 - Description) (Image: Assignment 09 - Due)","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"Assignments - This lesson is complete when students have:","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"Read Chapter 17 and Chapter 18 of Think Julia.\nRun all code examples from Lesson 9 on their own computers\nCloned the Assignment 9 repository with github classroom.\nCompleted assignment 9 with all tests passing.","category":"page"},{"location":"Lessons/Lesson9/#Types-can-be-scary-(but-don't-have-to-be)","page":"Lesson docs","title":"Types can be scary (but don't have to be)","text":"","category":"section"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"The first programming language I learned was python, which has a very lax relationship with types. When I first started learning julia, seeing types everywhere freaked me out a little bit.","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"One bit of good news is that, most of the time, you don't need to worry too much about types to write julia code. As you've seen, beyond knowing that things like split() only work on strings, or seeing a MethodError and needing to know what that means, mostly you can write functions without specifying argument types and you can get a lot done with built-in types.","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"But knowing a little bit about types can lead to simpler and clearer code and can help you debug problems more easily. But if it's not immediately obvious how to use types, or the syntax is a bit clumsy for a bit, that's fine. It's useful to know this tool exists, but you don't need to use it all the time.","category":"page"},{"location":"Lessons/Lesson9/#Functions-vs-Methods","page":"Lesson docs","title":"Functions vs Methods","text":"","category":"section"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"As you've seen, a function is an action performed on data. Most functions have names, like length() or gc_content(), But when you call a function, what is actually executed is a specific \"method\" of that function. That is, a version of the function that depends on the types of its arguments.","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"When you first define a function, it only has one method (the one you just defined).","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"julia> function somefunc(x)\n           println(\"Fallback method!\")\n       end\nsomefunc (generic function with 1 method)","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"But in julia, the same function name can refer to many methods, with different argument types, and even different numbers of arguments.","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"julia> function somefunc(x::Number)\n           println(\"Number method!!\")\n       end\nsomefunc (generic function with 2 methods)\n\njulia> function somefunc(x::AbstractString)\n           println(\"AbstractString method!!\")\n       end\nsomefunc (generic function with 3 methods)\n\njulia> function somefunc(x,y)\n           println(\"Two argument method!!\")\n       end\nsomefunc (generic function with 4 methods)\n\njulia> somefunc(2.3)\nNumber method!!\n\njulia> somefunc(\"woo!\")\nAbstractString method!!\n\njulia> somefunc([])\nFallback method!\n\njulia> somefunc(1.0, \"hey!\")\nTwo argument method!!","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"One can even define a method that calls another method of the same function! For example, we can write a complement() function that works on Char:","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"julia> function complement(base::Char)\n           base = uppercase(base)\n           comps = Dict('A' => 'T',\n                        'C' => 'G',\n                        'G' => 'C',\n                        'T' => 'A',\n                        'N' => 'N')\n           return comps[base]\n       end\ncomplement (generic function with 1 method)","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"And then another function that works on Strings, that maps the complement(::Char) method onto the String.","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"julia> function complement(seq::AbstractString)\n           map(complement, seq)\n       end\ncomplement (generic function with 2 methods)\n\njulia> complement(\"ATTGC\")\n\"TAACG\"","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"This works because map on a String applies the function to each element of the String, which are Chars. ","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"Some functions have a ton of methods - you can see them using the methods() function:","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"julia> methods(complement)\n# 2 methods for generic function \"complement\":\n[1] complement(base::Char) in Main at REPL[5]:2\n[2] complement(seq::AbstractString) in Main at REPL[3]:2","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"warning: Checking Question\nHow many methods does + have?","category":"page"},{"location":"Lessons/Lesson9/#Writing-your-own-types","page":"Lesson docs","title":"Writing your own types","text":"","category":"section"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"Sometimes, the best way to to solve a problem is to make a new type. For example, when you parsed FASTA files in Assignments 7 and 8, you were keeping headers and sequences separate -  this could lead to problems trying to keep them in sync later when you try to work with them.","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"Further, most of you solved that assignment by keeping a bunch of extra vectors around that stored intermediate sequences, and had to deal with special-casing the first and last sequence. That works, but it's a lot to keep track of.","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"Compare that approach to the following:","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"mutable struct FastaRecord\n    header\n    sequence\nend\n\n# these are \"accessor\" functions - they're not strictly necessary\nfunction header(fr::FastaRecord)\n    return fr.header\nend\n\nfunction sequence(fr::FastaRecord)\n    return fr.sequence\nend\n\n## Note: Simple functions like those above can be written with shortened syntax:\n# header(fr::FastaRecord) = fr.header\n# sequence(fr::FastaRecord) = fr.sequence\n\n# sequence! updates the sequence field\nfunction sequence!(fr::FastaRecord, seq::AbstractString)\n    fr.sequence = seq\nend\n\nfunction parse_fasta(path)\n    records = FastaRecord[] # this is special syntax for `Vector{FastaRecord}()`\n    for line in eachline(path)\n        if startswith(line, '>')\n            # if the line is a header, we push! a new record with an empty sequence to the `records` vector\n            header = line[2:end]\n            push!(records, FastaRecord(header, \"\"))\n        else\n            # otherwise, we add the line onto the end of the sequence\n            record = records[end]\n            newseq = sequence(record) * line\n            sequence!(record, newseq)\n        end\n    end\n    return records\nend","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"julia> ex1 = parse_fasta(\"/Users/ksb/repos/courses/assignment07/data/ex1.fasta\")\n2-element Array{FastaRecord,1}:\n FastaRecord(\"ex1.1 | easy\", \"AATTATAGC\")\n FastaRecord(\"ex1.2 | multiline\", \"CGCCCCCCAGTCGGATT\")","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"We can also write functions like length and gc_content that work on our FastaRecord type.","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"Base.length(fr::FastaRecord) = length(sequence(fr))\n\n# assuming you've already written `gc_content()` that works on `String`s\ngc_content(fr::FastaRecord) = gc_content(sequence(fr))","category":"page"},{"location":"Lessons/Lesson9/","page":"Lesson docs","title":"Lesson docs","text":"warning: Checking Question\nIf multiple methods work for a particular function call, how does julia decide which one to use?Eg, if I writejulia> function foo(x::Number, y::Number)\n    println(\"first method\")\nend\nfoo (generic function with 1 method)\n\njulia> function foo(x::Float64, y::Number)\n            println(\"second method\")\n        end\nfoo (generic function with 2 methods)\n\njulia> function foo(x::Float64, y::Float64)\n            println(\"third method\")\n        end\nfoo (generic function with 3 methods)Which method is called when I run foo(1.0, 1)? What about foo(42, 1.0)? Try to answer the question before running the code, then check to see if you're right.","category":"page"},{"location":"Lectures/Lectures/#lecture-index","page":"Lecture Index","title":"Lecture Index","text":"","category":"section"},{"location":"Lectures/Lectures/#Lecture-1","page":"Lecture Index","title":"Lecture 1","text":"","category":"section"},{"location":"Lectures/Lectures/","page":"Lecture Index","title":"Lecture Index","text":"(Image: Lecture 1 - slides) (Image: Lecture 1 - date)","category":"page"},{"location":"Lectures/Lectures/#Lecture-2","page":"Lecture Index","title":"Lecture 2","text":"","category":"section"},{"location":"Lectures/Lectures/","page":"Lecture Index","title":"Lecture Index","text":"(Image: Lecture 2 - slides) (Image: Lecture 2 - date) (Image: Lecture 2 - video)","category":"page"},{"location":"Lectures/Lectures/#Lecture-4","page":"Lecture Index","title":"Lecture 4","text":"","category":"section"},{"location":"Lectures/Lectures/","page":"Lecture Index","title":"Lecture Index","text":"(Image: Lecture 4 - slides) (Image: Lecture 4 - date) (Image: Lecture 4 - video)","category":"page"},{"location":"Lectures/Lectures/#Lecture-5","page":"Lecture Index","title":"Lecture 5","text":"","category":"section"},{"location":"Lectures/Lectures/","page":"Lecture Index","title":"Lecture Index","text":"(Image: Lecture 5 - slides) (Image: Lecture 5 - date) (Image: Lecture 5 - video)","category":"page"},{"location":"Lectures/Lectures/#Lecture-6","page":"Lecture Index","title":"Lecture 6","text":"","category":"section"},{"location":"Lectures/Lectures/","page":"Lecture Index","title":"Lecture Index","text":"(Image: Lecture 6 - slides) (Image: Lecture 6 - date) (Image: Lecture 6 - video)","category":"page"},{"location":"Lectures/Lectures/#Lecture-7","page":"Lecture Index","title":"Lecture 7","text":"","category":"section"},{"location":"Lectures/Lectures/","page":"Lecture Index","title":"Lecture Index","text":"(Image: Lecture 7 - date) (Image: Lecture 7 - video)","category":"page"},{"location":"Lectures/Lectures/#Lecture-8","page":"Lecture Index","title":"Lecture 8","text":"","category":"section"},{"location":"Lectures/Lectures/","page":"Lecture Index","title":"Lecture Index","text":"(Image: Lecture 8 - date) (Image: Lecture 8 - video)","category":"page"},{"location":"Lectures/Lectures/#Lecture-9","page":"Lecture Index","title":"Lecture 9","text":"","category":"section"},{"location":"Lectures/Lectures/","page":"Lecture Index","title":"Lecture Index","text":"(Image: Lecture 9 - date) (Image: Lecture 9 - video)","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"EditURL = \"https://github.com/wellesley-bisc195/BISC195.jl/blob/master/docs/literate/lectures/lecture4.jl\"","category":"page"},{"location":"Lectures/lecture4/#lecture4","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"","category":"section"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"Essential Skills For Computational Biology","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"2020-06-16","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"Kevin Bonham, PhD","category":"page"},{"location":"Lectures/lecture4/#\"Scope\"-is-where-references-live","page":"Lecture 4 - Scope and Fruitful Functions","title":"\"Scope\" is where references live","text":"","category":"section"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"A reference is a human-readable name for data or action\neg. a variable, argument, or function name\nAll references have scope\nsometimes the scope is \"global\" (available everywhere)\nsometimes the scope is narrow (eg. inside a loop)\nIn different scopes, the same name may reference different things","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"i = 3\n\nfor i in 1:5\n    print(i, \" \")\nend","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"i","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"myvar = \"Green eggs\"\nfunction ham(myvar)\n    myvar = \"ham\"\n    return myvar\nend","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"myvar","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"function decrement4()\n    j = 4\n    while j > 0\n        print(j, \" \")\n        j = j - 1\n    end\n    return j\nend\ndecrement4()","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"# copy to REPL\nj = 4\n\nwhile j > 0\n    print(j, \" \")\n    j = j - 1\nend","category":"page"},{"location":"Lectures/lecture4/#Fruitful-functions-and-the-perils-of-printing","page":"Lecture 4 - Scope and Fruitful Functions","title":"Fruitful functions and the perils of printing","text":"","category":"section"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"returned values are printed in the REPL\nprinted values are not (necessarily) returned","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"function verbose(thing)\n    println(thing)\n    return thing\nend","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"verbose(true)","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"verbose(1)\nverbose(2)\nverbose(3)","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"verbose(\"woah\");\nnothing #hide","category":"page"},{"location":"Lectures/lecture4/#A-reminder:-I-make-mistakes","page":"Lecture 4 - Scope and Fruitful Functions","title":"A reminder: I make mistakes","text":"","category":"section"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"Several people have encountered tests that failed even though they had correct answers\nDon't bang your head against the wall (for too long)\nWe will still make you work for it\nNot all difficulty is desirable","category":"page"},{"location":"Lectures/lecture4/#One-other-reminder:-Helping-eachother-is-ok","page":"Lecture 4 - Scope and Fruitful Functions","title":"One other reminder: Helping eachother is ok","text":"","category":"section"},{"location":"Lectures/lecture4/#(Just-don't-copy-paste-code-from-one-another)","page":"Lecture 4 - Scope and Fruitful Functions","title":"(Just don't copy-paste code from one another)","text":"","category":"section"},{"location":"Lectures/lecture4/#Final-project-ideas","page":"Lecture 4 - Scope and Fruitful Functions","title":"Final project ideas","text":"","category":"section"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"COVID data analysis\nSARS-CoV2 evolution / strain analysis\nPolice violence data analysis\nYour idea here","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"","category":"page"},{"location":"Lectures/lecture4/","page":"Lecture 4 - Scope and Fruitful Functions","title":"Lecture 4 - Scope and Fruitful Functions","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Assignments/Assignment08/#assignment08","page":"Assignment08","title":"Assignment 08","text":"","category":"section"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"(Image: Assignment 08 - Due)","category":"page"},{"location":"Assignments/Assignment08/#Check-list","page":"Assignment08","title":"Check list","text":"","category":"section"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"There are a lot of different tasks introduced in this assignment, and you will not have automated tests to tell you when you're done. Here's a checklist to help you keep track, which Kevin will add to your github repo once you've created it and shared it with him.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"[ ] Code repo (from Assignment 7), renamed and in public repo\n[ ] tests still passing\n[ ] Analysis repo complete\n[ ] README has heading 1 title and bold author line\n[ ] Project.toml with code repo, Revise, DataFrames, and Plots as dependencies\n[ ] data/ directory with explanation for how to download data\n[ ] cov-sequences.fasta\n[ ] notebooks/ directory with 1-sequence-stats.md\n[ ] Including code and description for calculating mean and standard deviations     for sequence length and gc content","category":"page"},{"location":"Assignments/Assignment08/#Wrapping-up-Assignment07-Package","page":"Assignment08","title":"Wrapping up Assignment07 Package","text":"","category":"section"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"In the previous assignment, we created a julia package that you're going to be re-using for the rest of the course. But it doesn't have a very good name, and at the moment, your assignments are in private repos,  which makes some stuff (like using it for automated tests) harder.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"warning: Warning\nBefore continuing, make sure that you've successfully completed assignment 7 and all of the tests are passing","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"First, let's make a new, public home for your bioinformatics package.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"On github, create a new repository:\n(Image: Create repo)\nGive it a good name - Julia package names usually end with .jl. Be sure that the repo is set to public. (Image: Create repo)\nCopy the url of the repository\n(Image: Create repo)\nOn your computer, navigate to your Assignment07-<username> directory. We are now going to point git to this new location, so that when you make new changes in the future, they will go there instead.\nIn the terminal,\n$ git remote set-url origin <paste URL here>\n$ git push -u origin trunk\nEnumerating objects: 61, done.\nCounting objects: 100% (61/61), done.\nDelta compression using up to 12 threads\nCompressing objects: 100% (46/46), done.\nWriting objects: 100% (61/61), 76.07 KiB | 1.46 MiB/s, done.\nTotal 61 (delta 21), reused 24 (delta 7), pack-reused 0\nremote: Resolving deltas: 100% (21/21), done.\nTo github.com:kescobo/BioinformaticsBISC195.jl.git\n * [new branch]      trunk -> trunk\nBranch 'trunk' set up to track remote branch 'trunk' from 'origin'.\nNow let's rename the module in the julia code. Open the assignment directory in VS Code. There are a few places that the module name currently exists - use cmd+shift+F (ctrl+shift+F on Windows) to open the search panel (you can also click the magnifying glass icon in the sidebar) and search for Assignment07. \nReplace Assignment07 with whatever you named your module, and then rename the main module file at src/Assignment07.jl.\nCommit and push your changes.\nBack on github, click on the Settings tab for your repository, then on Manage access, and add Kevin (@kescobo) as a collaborator.","category":"page"},{"location":"Assignments/Assignment08/#Building-an-analysis-repository","page":"Assignment08","title":"Building an analysis repository","text":"","category":"section"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"Now, we'll create a new project to handle our analyses of SARS-CoV2 genomes. While it is possible to keep everything in the same directory, it's a good idea to keep code that may be useful in many projects (such as your bioinformatics functions) separate from code that is used for one specific purpose.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"Open a terminal, and create a new directory with mkdir for CoV2 analysis (you can put it in the same directory as your other assignments, but don't put it inside any of those assignments). Use cd to make this new directory your working directory, then enter git init to make this into a git repository.\nOn github, create a new repository, copy its url, and use git remote add to set this as origin (refer back to lesson 1 if you need a reminder about how these commands work).\n$ git remote add origin <url>\nDon't forget to add Kevin as a collaborator.\nCreate a directory inside this repo called notebooks, and another called data.\nOpen the analysis directory in VS Code. Create a file called README.md, give it a title (use markdown to make the title Heading 1 format), and add By <your name> under the title in bold.\nCommit and push your changes. Remember, the first time you push, you need to say where to push:\n$ git push --set-upstream origin master\nTake a look at the repo on github - your README should show up, correctly formatted, but the directories won't show up until there are committed files in them.\nAdd a file called data.md to the data/ directory - This is where we'll describe how to get the data that we're going to analyze, but you can leave it blank for now\nAdd a file called 1-sequence-stats.md to the notebooks directory. Also ok to leave this file blank for now.\nCommit and push your changes.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"At this point, you should have a git repo with the following structure:","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"./MyAnalysis\n├── data\n│   └── data.md\n├── notebooks\n│   └── 1-sequence-stats.md\n└── README.md","category":"page"},{"location":"Assignments/Assignment08/#Getting-the-data","page":"Assignment08","title":"Getting the data","text":"","category":"section"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"An enormous amount of data has already been generated on SARS-CoV2 (the virus) and COVID-19 (the disease caused by CoV2). You can get links to much of it on NCBI - the National Center for Biotechnology Information.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"We're particularly interested in the genome sequences of SARS-related corona viruses. Go to the Virus search page, and use the search function to see all of the genomes of SARS-CoV (Severe accute respiratory syndrom-related Coronavirus), MERS-CoV (Middle East repiratory syndrom-related Coronavirus), and SARS-CoV2 (the virus that causes COVID19).","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"Refine the search a bit by selecting only complete genomes (under \"Nucleotide completeness\"). At the time I write this, there are just under 7300 such records, though there may be more by the time you search.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"The search parameters you enter are stored in the url. Copy the url and put it into your data/data.md file, explaining what it is. It's always a good idea to keep track of where data comes from so that your work is reproducible by someone else.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"Click \"download\", make sure \"FASTA Nucleotide\" is selected, and download all records. When it asks about the FASTA definition line (the header), build a custom header and be sure to include the Accession number (this is a unique identifier), the species, and the Geo location. ","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"Download the sequences, and put them into your data/ directory with a more descriptive name than sequences.fasta. Be sure to describe what you did in data/data.md.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"tip: Tip\nUsually, it's not a good idea to add and commit large files like genome sequences to the git repository, especially if those files are likely to change often (since git stores a record of all of the different versions). In this case, our file is not going to change, and it's not that big, so it's ok to commit it, but if you want to avoid commiting it, and to make git forget about trying to track it, you can create a file called .gitignore inside your repo, and put data/<filename> in it. Be sure to add and commit the .gitignore file!","category":"page"},{"location":"Assignments/Assignment08/#Setting-up-julia-project","page":"Assignment08","title":"Setting up julia project","text":"","category":"section"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"Open a julia REPL in your analysis directory (you can do this from VS Code or by opening a new REPL and using cd()).","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"Now, activate the environment from the Pkg REPL, and use dev (short for develop) to install your bioinformatics project. To do this, you can use the path (relative or absolute) to the bioinformatics project directory.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"For example, if it is in your Documents/ directory, you might enter","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"pkg> dev /Users/<username>/Documents/BioinformaticsBISC195","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"note: Note\nAs with $ in shell prompts, the pkg> is an indicator that you should be using the Pkg REPL (accessible by pressing ]), and isn't part of the actual command.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"Once you've done this, you will be able to do using BioinformaticsBISC195 in your julia code, as long as this julia project is active.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"In addition, use add to install the packages Revise, Plots, and DataFrames.  We'll use those a bit more later.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"Add and commit the Project.toml and Manifest.toml files,","category":"page"},{"location":"Assignments/Assignment08/#Using-the-notebook","page":"Assignment08","title":"Using the notebook","text":"","category":"section"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"In the notebooks/1-sequence-stats.md file, write julia code to calculate the mean and standard deviation of the lengths and gc content of your coronavirus genomes, as you did in Assignment 6. Include a title (with header format) and a description of what your code is doing. ","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"Remember, you can use the code you've written in your bioinformatics package just by doing using <PackageName>. Also remember, in markdown files, julia code should go in \"code fences.\" Eg.","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"# Some Coronavirus Analysis\n\nHere's some description of what I'm doing.\nI downloaded coronavirus geneomes from NCBI\n(see `data/data.md` for more details)\n\nEtc.\n\n```julia\nusing BioinformaticsBISC195\n\ngenomes = parse_fasta(\"../data/cov2_sequences.fasta\")\n```\n\nNow I have the genomes, and need to do stats.\nNote - your descriptions should be... more descriptive.\n\n```julia\nusing Statistics\n#more code...\n\n```\n\netc..","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"If you're using VS Code to edit your markdown, and have both the julia and markdown julia extensions installed, you can execute code within code fences in exactly the same way as you've been doing in .jl files.","category":"page"},{"location":"Assignments/Assignment08/#No-tests","page":"Assignment08","title":"No tests","text":"","category":"section"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"There are no automated tests for your analysis code - this is research, I don't know what the right answer is!","category":"page"},{"location":"Assignments/Assignment08/","page":"Assignment08","title":"Assignment08","text":"But this means that it's extra important that you add extra checks to make sure the code is doing what you intend.","category":"page"},{"location":"Assignments/assignment02_code/#Instructions-for-Assignment02","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"","category":"section"},{"location":"Assignments/assignment02_code/#Introduction","page":"Instructions for Assignment02","title":"Introduction","text":"","category":"section"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"In this assignment, you will start to put the pieces together. Note: this file is runnable in its current state, but is incomplete. You can run the file from the command line, or use the VS Code julia extension to run individual lines.","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"The following code is used for set up; there is no need to change it. If you do change it to figure out what it's doing, make sure you change it back or your assignment may not work correctly","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"using Random\nRandom.seed!(42)\n\nfunction generate_sequence(len)\n    seq = join(rand(['A','C','G','T'], len))\n    println(\"Your sequence is: \", seq)\n    return seq\nend\n\nmy_seq = generate_sequence(20)","category":"page"},{"location":"Assignments/assignment02_code/#Question-1","page":"Instructions for Assignment02","title":"Question 1","text":"","category":"section"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"The code above generates a random 20nt DNA sequence, and assigns it to the variable my_seq. What kind of data type is my_seq (eg Float64, Int64, String, or something else)? Assign the variable question1 to the correct type.","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"Hint1: rather than guess, you can just use the typeof() function.","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"question1 = \"\"","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"Hint2: If you're having trouble, note that your answer should not contain quotes. Eg. if you thing that seq has the type MyType, your code should read question1 = MyType and not question1 = \"MyType\"","category":"page"},{"location":"Assignments/assignment02_code/#Question-2","page":"Instructions for Assignment02","title":"Question 2","text":"","category":"section"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"The function bellow has a \"doc string\", which explains what the function should do. Many julia functions have doc strings, which makes it easy to get help right from the REPL","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"Open a julia REPL and type ?. You will see the julia> prompt change to help?>. Now type println and hit enter. The docstring of println is printed and you're returned to a julia prompt","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"Evaluate the following function, including the docstring, in the REPL (that is, copy from the tripple quotes down to the \"end\" and paste it into the REPL, then hit enter)","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"\"\"\"\n    question2(sequence)\n\nChecks if `sequence` is a String.\nReturns a boolean value, `true` or `false`.\n\nExample\n≡≡≡≡≡≡≡≡≡\n\n    julia> question2(\"hello\")\n    true\n\n    julia> question2(1001)\n    false\n\n    julia> if question2(\"a string\")\n               println(\"Hey, it's a string!\")\n           end\n    Hey, it's a string!\n\"\"\"\nfunction question2()\n    # put your code here\nend","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"At the moment, this function doesn't do what it says it should. Actually, it doesn't do anything. Fix the function so that it takes one argument and returns true if the argument is a String, and returns false otherwise. You should be able to run the examples in the docstring and get the correct answer, and to run this function using my_seq as the argument (it should return true).","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"Hint: You haven't explicitly encountered a way to check if a type is another type. Learning to search for answers is a key programming skill! Try searching \"check if type is string julia\". Typically, when I see search results, I prioritize in this order:","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"stackoverflow.com\ndocs.julialang.org\ndiscourse.julialang.org\ngithub.com","category":"page"},{"location":"Assignments/assignment02_code/#Question-3","page":"Instructions for Assignment02","title":"Question 3","text":"","category":"section"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"Let's try something a bit more complicated. The question3() function has a doc string, but is also incomplete. I've written some code to get you started, complete it so that the examples work as expected in the docstring. If you use this function on my_seq, you should get the answer 0.3","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"\"\"\"\n    question3(sequence)\n\nCalculates the GC ratio of a DNA sequence.\nThe GC ratio is the total number of G and C bases divided by the total length of the sequence.\nFor more info about GC content, see here:\n\nExample\n≡≡≡≡≡≡≡≡≡≡\n\n    julia> question3(\"AATG\")\n    0.25\n\n    julia> question3(\"CCCGG\")\n    1.0\n\n    julia> question3(\"ATTA\")\n    0.0\n\"\"\"\nfunction question3(sequence)\n    # throw an error if the string contains anything other than ACGT\n    if any(c-> !in(c, ['A','C','G','T']), sequence)\n        throw(ArgumentError(\"Sequence must only contain ACGT\"))\n    end\n\n    # change line to assign `seqlength` to the length of `sequence` instead of `1`\n    # If you're stuck, search for \"length of string julia\"\n    seqlength = 1\n\n    # count the number of G's\n    gs = count(==('G'), sequence)\n    # count the number of C's\n    cs = count(==('C'), sequence)\n\n    return gs + cs / seqlength # something is wrong with this line...\nend","category":"page"},{"location":"Assignments/assignment02_code/#Question-4","page":"Instructions for Assignment02","title":"Question 4","text":"","category":"section"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"This process should be familiar by now.","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"Hint: you do not need to re-write code if you already have it. That is, don't copy any code from question3, just call it!","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"\"\"\"\n    question4(sequence)\n\nCalculates the GC content of a DNA sequence\nand prints it to the screen.\n\nExample\n≡≡≡≡≡≡≡≡≡≡\n\n    julia> question4(\"AATC\")\n    Sequence:\n    AATC\n    GC Content:\n    0.25\n\n    julia> question4(\"CCCGG\");\n    Sequence:\n    CCCGG\n    GC Content:\n    1.0\n\"\"\"\nfunction question4(sequence)\n    # Your code here\nend","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"","category":"page"},{"location":"Assignments/assignment02_code/","page":"Instructions for Assignment02","title":"Instructions for Assignment02","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Assignments/Assignment03/#assignment03","page":"Assignment03","title":"Assignment03","text":"","category":"section"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"(Image: Assignment 03 - Invitation) (Image: Assignment 03 - Description) (Image: Assignment 03 - Rendered) (Image: Assignment 03 - Due)","category":"page"},{"location":"Assignments/Assignment03/#Instructions","page":"Assignment03","title":"Instructions","text":"","category":"section"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"Hopefully, this process is familiar by now. Click the assignment 3 invitation above, clone the repository, and follow the instructions in src/assignment.jl. Remember, an easier-to-read version of the assignment script can also be viewed by clicking the \"Script\" badge above.","category":"page"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"Also, recall that you may run the automated tests on your own computer:","category":"page"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"$ julia --project -e 'using Pkg; Pkg.test()'","category":"page"},{"location":"Assignments/Assignment03/#Using-the-VS-Code-julia-extension","page":"Assignment03","title":"Using the VS Code julia extension","text":"","category":"section"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"There are a number of tools that can turn VS code into a more useful development environment. One of them is the julia plugin.","category":"page"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"To install plugins, click the \"Extensions\" button on the left hand side of the VS code application window.","category":"page"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"(Image: VS code extensions)","category":"page"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"Then type \"julia\" and click to install the Julia and Markdown Julia extensions.","category":"page"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"(Image: julia extensions)","category":"page"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"Once this is finished, your julia files should have syntax highlighting (making it easier to see different parts of you program), and allowing you to send bits of julia code to an integrated julia REPL.","category":"page"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"note: Note\nJust after you install the plugin, it may take a bit of time for the \"language\" server to get going. If the stuff below doesn't work at first, just wait a couple of minutes.","category":"page"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"compat: Windows Users\nYou should also install the \"WSL remote\" extension. This allows you to access your Ubuntu installation as if it were a remote computer. Once it's installed, press the \"Remote Explorer\" button on the left toolbar, and you should see your Ubuntu installation. Click the + icon next Ubuntu, and then you can browse and open folders inside linux.","category":"page"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"One the plugin is installed, open src/assignment.jl in your Assignment03 directory from within VS Code. Then, put the cursor on the line with function compliment(base), press and hold the alt key, then press return.","category":"page"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"A julia REPL will open inside VS Code, and the entire function body should be copied into it and executed. This will allow you to experiment with the code inside the assignment and do incremental development of your functions without needing to run the entire file each time you make a change.","category":"page"},{"location":"Assignments/Assignment03/","page":"Assignment03","title":"Assignment03","text":"tip: Tip\nSometimes, you can confuse yourself by running things out of order. For example, let's say I write,function hello(x)\n    println(\"Hello, $(x)!\")\nend\n\ns = \"Students\"\nt = \"TAs\"\n\nhello(s)\nhello(t)And then execute the whole thing in VS code. Later on, I decide I don't need to say hello to the TAs so I delete the line t = \"TAs\", but forget to delete hello(t). As I continue to run the code in the same julia session, there are no problems because, even though I deleted t = \"TAs\", there's no way to unassign t - it's still defined. But, if I come back later and try to run the file in a new julia session, I will get an UndefinedVariableError when the program tries to execute hello(t).","category":"page"},{"location":"Assignments/Assignment02/#assignment02","page":"Assignment02","title":"Assignment02","text":"","category":"section"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"(Image: Assignment 02 - Invitation) (Image: Assignment 02 - Description) (Image: Assignment 02 - Rendered) (Image: Assignment 02 - Due)","category":"page"},{"location":"Assignments/Assignment02/#Instructions","page":"Assignment02","title":"Instructions","text":"","category":"section"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"As you did with Assignment01, click the invite link to make a new copy of the assignment repository.","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"Then, clone the repository, and look at the src/assignment.jl file, which contains information for what needs to be done. ","category":"page"},{"location":"Assignments/Assignment02/#Unit-Tests","page":"Assignment02","title":"Unit Tests","text":"","category":"section"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"You may or may not have noticed that each of your assignments has automated \"unit testing\" set up to check that your code works as expected. ","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"Once you've completed the assignment, you will see a green checkmark next to the commit in github","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"(Image: Github CI passing)","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"You can also check this on your own computer - with your assignment repository as the working directory, run:","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"$ julia --project -e 'using Pkg; Pkg.test()'","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"If you do this before you've completed the assignment, you'll probably see a bunch of error messages, along with the test results:","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"Test Summary: | Pass  Fail  Error  Total\nAssignment02  |    6     3      5     14\n  Setup       |    3                   3\n  Question 1  |          2             2\n  Question 2  |    1            4      5\n  Question 3  |    1     1             2\n  Question 4  |    1            1      2\nERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 5 errored, 0 broken.","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"Unit tests are widely used in computer programing so that developers can be certain that their code is working the way they intend. I'm using them here so you can tell how close you are to completing your assignment. For now, you can just be assured that if all tests pass, you're done, and if they don't, you still have some work to do","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"If you'd like to know more, keep reading. The information below is not necessary to complete the assignment this week (though some of the information may be helpful 😉).","category":"page"},{"location":"Assignments/Assignment02/#How-tests-work","page":"Assignment02","title":"How tests work","text":"","category":"section"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"Tests take the form of conditional expressions - that is, things that return true or false.","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"julia> using Test\n\njulia> @test true\nTest Passed\n\njulia> @test false\nTest Failed at REPL[3]:1\n  Expression: false\nERROR: There was an error during testing","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"\"Passing\" tests are those that evaluate true. \"Failing\" tests are those that evaluate false. Errors are reported when the expression throws an error before returning a value, or when the expression doesn't return either true or false  .","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"There are lots of different types of \"boolean\" expressions, those that return true or false. For example, == is used to ask if two values are equal.","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"1 + 1 == 2\n\nx = 3\n\nx == 6 / 2\n\n\"3\" == x","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"There are also many built-in functions whose role is to check something, returning a boolean value.","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"isodd(42)\n\niseven(12)","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"We can define \"testsets\" that check a bunch of expressions and report the information","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"julia> using Test\n\njulia> @testset \"Example tests\" begin\n           lifeuniverseeverything = 42\n           age = 35\n           pi = 3.14\n\n           @test iseven(lifeuniverseeverything)\n           @test iseven(age)\n           @test iseven(pi)\n       end","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"Test Summary: | Pass  Fail  Error  Total\nExample tests |    1     1      1      3","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"warning: Checking Question\nWhich test failed, and which test was an error?Run the example in the REPL; can you find any relevant information in the stacktrace?","category":"page"},{"location":"Assignments/Assignment02/","page":"Assignment02","title":"Assignment02","text":"If you'd like to examine the tests for this assignment, take a look inside test/runtests.jl in your assignment repository. A lot of things will likely be unfamiliar, but you might find some hints for how to finish the assignment...","category":"page"},{"location":"Assignments/assignment05_code/#Instructions-for-Assignment05","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"","category":"section"},{"location":"Assignments/assignment05_code/#Introduction","page":"Instructions for Assignment05","title":"Introduction","text":"","category":"section"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"Note: this file is runnable in its current state, but is incomplete. You can run the file from the command line, or use the VS Code julia extension to run individual lines.","category":"page"},{"location":"Assignments/assignment05_code/#Question-1-Dubugging-Practice","page":"Instructions for Assignment05","title":"Question 1 - Dubugging Practice","text":"","category":"section"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"At the end of Chapter 8 of Think Julia, there is an exercise (8-6) intended to help you debug a string traversal function. Below is the initial code with errors. Fix it up as described in the chapter.","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"Note: you should always be completing the exercises from the book, by actually writing and executing the code, either in a file or in the REPL.","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"function isreverse(word1, word2)\n    if length(word1) != length(word2)\n        return false\n    end\n    i = firstindex(word1)\n    j = lastindex(word2)\n    while j >= 0\n        j = prevind(word2, j)\n        if word1[i] != word2[j]\n            return false\n        end\n        i = nextind(word1, i)\n    end\n    true\nend","category":"page"},{"location":"Assignments/assignment05_code/#Question-2-Reverse-complement","page":"Instructions for Assignment05","title":"Question 2 - Reverse complement","text":"","category":"section"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"In Assignment03, you created a function called complement(), that took a DNA base as an argument, and returned its complement (A <-> T or G <-> C). This function does the same thing, using a slightly different method. Look it over and see if it makes sense. If it doesn't, try running some individual pieces in the REPL, But don't modify the code (or if you do, make sure you know how to get it back)","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"\"\"\"\n    complement(base)\n\nGet the DNA complement of the provided base:\n\n    A <-> T\n    G <-> C\n\nAccepts uppercase or lowercase `String` or `Char`,\nbut always returns an uppercase `Char`.\nIf a valid base is not provided, the function throws an error.\n\"\"\"\nfunction complement(base)\n    complements = Dict(\"A\" => 'T',\n                       \"T\" => 'A',\n                       \"G\" => 'C',\n                       \"C\" => 'G')\n\n    base = uppercase(string(base))\n\n    !(base in keys(complements)) && error(\"Invalid base $base\")\n    return complements[base]\nend","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"The \"reverse complement\" of a DNA sequence is valuable to know, since it represents the complementary sequence in the expected orientation (5' -> 3'). If you haven't taken molecular biology and this sounds like gibberish, you may want to read up a bit on it here","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"Now, write a function like isreverse() above, but that checks whether two sequences are the reverse AND complement of one another. Note one other difference here - rather than returning false if the sequences are different lengths, this function should error.","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"\"\"\"\n    isreversecomplement(seq1, seq2)\n\nBoolean function that checks whether two DNA seqences\nare the reverse complement of one another, irrespective of capitalization.\nReturns true if yes, false otherwise.\n\nIf any invalid bases are encountered,\nor if sequences are different length, throws an error.\n\nExamples\n≡≡≡≡≡≡≡≡≡≡\n\n    julia> isreversecomplement(\"aaatttcg\", \"cgaaattt\")\n    true\n\n    julia> if isreversecomplement(\"C\", \"A\")\n               println(\"Yes!\")\n           else\n               println(\"No!\")\n           end\n    No!\n\n    julia> isreversecomplement(\"TX\", \"AG\")\n    Error: Invalid base X\n\n    julia> isreversecomplement(\"G\", \"CC\")\n    Error: Cannot compare sequuences of different length\n\"\"\"\nfunction isreversecomplement(seq1, seq2)\n    # your code here\nend","category":"page"},{"location":"Assignments/assignment05_code/#Question-3","page":"Instructions for Assignment05","title":"Question 3","text":"","category":"section"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"Now let's work on creating a function that makes the reverse complement of a sequence, instead of just checking it. First, it's probably helpful to know that julia has a built in reverse() function that can take a String or Vector and return it with the indecies reversed.","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"julia> reverse([4,3,2,1])\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\njulia> reverse(\"beep boop\")\n\"poob peeb\"","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"Now, create a function that takes a sequence and returns the reverse complement. The easiest way to do this is probably to perform a \"map\" of the complement() function to each character in the sequence, then reverse it (or reverse, then map). You can write the mapping by hand as in the book, or use map() as described in the lesson.","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"\"\"\"\n    reverse_complement(sequence)\n\nTakes a DNA sequence and returns the reverse complement\nof that sequence.\n\nTakes lowercase or uppercase sequences,\nbut always returns uppercase.\n\nExamples\n≡≡≡≡≡≡≡≡≡≡\n    julia> reverse_complement(\"AAATTT\")\n    \"AAATTT\"\n\n    julia> reverse_complement(\"GCAT\")\n    \"ATGC\"\n\n    julia> rc = reverse_complement(\"TTGGG\");\n\n    julia> println(rc)\n    CCCAA\n\"\"\"\nfunction reverse_complement(sequence)\n    # your code here\nend","category":"page"},{"location":"Assignments/assignment05_code/#Question-4a","page":"Instructions for Assignment05","title":"Question 4a","text":"","category":"section"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"Chapter 9 begins to describe how to work with files. The file words.txt from Think Julia is in the data/ directory of the assignment repository. First, look at the file from the shell (not a julia REPL) using the head command.","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"$ head data/words.txt","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"By default, head prints the first 10 lines. How can you change this behavior to show the first 15 lines? (Hint: you may need a search engine). Put the shell command to show the first 15 words of data/words.txt in a String assigned to the variable first15","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"first15 = \"#= put shell command here =#\"","category":"page"},{"location":"Assignments/assignment05_code/#Question-4b","page":"Instructions for Assignment05","title":"Question 4b","text":"","category":"section"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"What about the shell command to view the last 15 lines of data/words.txt? Put this command in a string assigned to the variable last15","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"last15 = \"#= put shell command here =#\"","category":"page"},{"location":"Assignments/assignment05_code/#Question-5","page":"Instructions for Assignment05","title":"Question 5","text":"","category":"section"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"Write a function that reads through the words in a file with a for loop and returns an array with only the words that are valid DNA sequences. Note: there may be one or more functions from previous Assignments that are useful to reuse here.","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"\"\"\"\n    find_dna(file)\n\nIn a file with one word per line,\nreturns an array with all words that are valid DNA sequences\n(that is, they contain only a, t, g, or c).\n\nWords may be upper- or lowercase,\nbut returned array will contain only uppercase letters.\n\nExample\n≡≡≡≡≡≡≡≡≡\n    julia> find_dna(\"data/words.txt\") # assumes you're in Assignment05 directory\n    13-element Array{Any,1}:\n      \"AA\"\n      \"ACT\"\n      \"ACTA\"\n      \"AGA\"\n      \"AT\"\n      \"CAT\"\n      \"GAG\"\n      \"GAGA\"\n      \"GAT\"\n      \"TA\"\n      \"TACT\"\n      \"TAG\"\n      \"TAT\"\n\"\"\"\nfunction find_dna(file)\n    # 1. You probably want to make an empty array\n\n    for line in eachline(file)\n        # if the line is valid dna, put it in the array\n    end\nend","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"","category":"page"},{"location":"Assignments/assignment05_code/","page":"Instructions for Assignment05","title":"Instructions for Assignment05","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Assignments/Assignment07/#assignment07","page":"Assignment07","title":"Assignment07","text":"","category":"section"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"(Image: Assignment 07 invitation) (Image: Assignment 07 - Description) (Image: Assignment 07 - Due)","category":"page"},{"location":"Assignments/Assignment07/#Instructions","page":"Assignment07","title":"Instructions","text":"","category":"section"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"Click the assignment 7 invitation above and clone the repository. This assignment is going to be a bit different than assignments in the past, so read on.","category":"page"},{"location":"Assignments/Assignment07/#Building-a-package","page":"Assignment07","title":"Building a package","text":"","category":"section"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"Assignment07 is a julia package (actually, all of your assignments have been julia packages). Let's take a look at it from the command line.","category":"page"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"Change your current working directory to the assignment directory.\nList the contents of the directory (take a look back at Lesson 1 if you don't remember how).\nIn the main directory, you should see (among other things) the src/ directory, which contains the main project code, the test/ directory, which contains the automated tests, and the Project.toml file, which describes the properties of the package.\nLook at the contents of Project.toml (do you remember how to do this from the command line?).\nname = \"Assignment07\"\nuuid = \"67893044-1481-44cf-8ab6-de350e09ee4e\"\nauthors = [\"Kevin Bonham, PhD <kbonham@wellesley.edu>\"]\nversion = \"0.1.0\"\n\n[compat]\njulia = \"1.4\"\nThis file is written in a format called toml (for Tom's obvious, minimal language). It's not julia code, but it has some similar features.\nOpen the file in VS Code, and add your name to the list of authors. Arrays in toml files have the same syntax as in julia\nOpen a julia REPL, and set the working directory Assignment07-<username>/ Open the Pkg REPL prompt (with ]), and activate the project\n(@v1.4) pkg> activate .\nActivating environment at `~/repos/courses/assignment07/Project.toml`\n\n(Assignment07) pkg>\nNow, look at Project.toml again - you should see a new section [deps] that lists BioSequences. This describes your Package's \"dependencies,\" which are other packages that your package depends on to function correctly.\nLook at the directory again - you should now see that a Manifest.toml file has been created. This file contains more specific information about the precise configuration (versions, names, locations, etc) of all the packages, including \"indirect\" dependencies (the dependencies of your dependencies). You should never edit this file manually.","category":"page"},{"location":"Assignments/Assignment07/#Adding-code","page":"Assignment07","title":"Adding code","text":"","category":"section"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"When you execute using BioSequences, julia interprets this as asking to execute the code found in the BioSequences package - specifically the code in src/BioSequences.jl. Take a look at that file on github here.","category":"page"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"This file contains a module definition, which is declared like this:","category":"page"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"module BioSequences\n\n# code for the module\n\nend","category":"page"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"A module is a container for code that can be called with using. You can define a module right in your REPL:","category":"page"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"julia> module MyModule\n\n       function somefunction()\n           println(\"Hi! I'm a function in MyModule\")\n       end\n\n       end\nMain.MyModule\n\njulia> using .MyModule # the leading `.` is necessary for modules that aren't installed as packages\n\njulia> MyModule.somefunction()\nHi! I'm a function in MyModule","category":"page"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"Note that somefunction() is not available by itself, you need to tell julia that it's found in MyModule by typing MyModule.somefunction().  In order to make the function available without specifying its module, the module must export it.","category":"page"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"julia> module MyModule\n\n       export somefunction,\n              otherfunction\n\n       function somefunction()\n           println(\"Hi! I'm a function in MyModule\")\n       end\n\n       function otherfunction()\n           println(\"Me too! Me too!\")\n       end\n\n       function notexported()\n           println(\"Me too - but I'm not exported :-(\")\n       end\n\n       end\nWARNING: replacing module MyModule.\nMain.MyModule\n\njulia> using .MyModule\n\njulia> somefunction()\nHi! I'm a function in MyModule\n\njulia> otherfunction()\nMe too! Me too!\n\njulia> notexported()\nERROR: UndefVarError: notexported not defined\nStacktrace:\n [1] top-level scope at REPL[14]:1\n [2] eval(::Module, ::Any) at ./boot.jl:331\n [3] eval_user_input(::Any, ::REPL.REPLBackend) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.4/REPL/src/REPL.jl:86\n [4] run_backend(::REPL.REPLBackend) at /Users/ksb/.julia/packages/Revise/tV8FE/src/Revise.jl:1165\n [5] top-level scope at none:0\n\njulia> MyModule.notexported()\nMe too - but I'm not exported :-(","category":"page"},{"location":"Assignments/Assignment07/#Bioinformatics-Functionality","page":"Assignment07","title":"Bioinformatics Functionality","text":"","category":"section"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"Now, let's make Assignment07 into a package that you can reuse for future assignments.","category":"page"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"tip: Tip\nIn many packages, there's so much code that it would be hard to keep track of if everything were in the main module file. Instead, most of the code is written in separate files, and then include(\"code_file.jl\") is added to the module file.In julia, include(\"code_file.jl\") executes all of the text contained in code_file.jl, so it's identical to having that code in the module file itself, but it keeps things more orderly.Take a look at the src/AssignmentXX.jl files in your previous assignments, and the module file of BioSequences linked above. They all follow this pattern.","category":"page"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"Write and export the following functions in the Assignment07 module. You may copy as much code as you like from previous assignments, but keep in mind that some of the functions have slightly different parameters.","category":"page"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"warning: Bonus Challenge\nYou may write all of the code using Strings for DNA sequences as we've been doing. However, if you'd like an additional challenge, you may try to write the functions using the DNA types from BioSequences.If you'd like to try this, edit the file in test/runtests.jl to comment out the \"Using Strings\" testset and un-comment the \"Using BioSequences\" testset. Tip - in VS code you can select a whole block of text and press cmd+/ to comment/un-comment (for Windows users, it's 'ctrl+/`).","category":"page"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"normalizeDNA(sequence): This function is already written for you.\ncompsition(sequence): Like basecomposition() from assignment04, but instead of returning a Tuple of values, return a Dict, with keys 'A', 'C', 'G', 'T', and 'N'.\nExamples:\njulia> composition(\"ACCGGGTTTTN\")\nDict{Char,Int64} with 5 entries:\n  'A' => 1\n  'G' => 3\n  'T' => 4\n  'N' => 1\n  'C' => 2\n \njulia> composition(\"AAX\")\nERROR: Invalid base, X","category":"page"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"warning: Bonus Challenge\nIf you're using BioSequences, this function already exists:julia> using BioSequences\n\njulia> BioSequences.composition(dna\"ACCGGGTTTTN\")\nComposition{DNA} with 5 entries:\nDNA_C => 2\nDNA_N => 1\nDNA_A => 1\nDNA_G => 3\nDNA_T => 4\n\njulia> d[DNA_T]\n4You can use functions from BioSequences in your own functions by doing using BioSequences, but if you want to export them from your own package or add additional methods, you must do an \"import\": import BioSequences: compositiontip: Tip\nThis may be true for some other functions too... read the documentation, be sure that your functions meet the specifications. To use import on multiple functions, separate them by commas:Eg. import PackageA: func1, func2","category":"page"},{"location":"Assignments/Assignment07/","page":"Assignment07","title":"Assignment07","text":"gc_content(seq): Exactly like gc_content() from Assignment 4, except that it should accommodate ambiguous bases (eg sequences that have 'N' in them).\nExamples:\njulia> gc_content(\"ATNG\")\n0.25\n\njulia> gc_content(\"ccccggggn\")\n0.8888888888888888\nwarning: Bonus Challenge\nThe BioSequences tests assume you're passing LongSequences as arguments, eg gc_content(dna\"ATNG\"), but extra bonus if you can accommodate Strings as well.\ncomplement(sequence): Like complement() from Assignment 5, except that it should accomodate ambiguous bases (the complement of N is N), and should work on Strings rather than Char.\ntip: Tip\nIn julia, you can write functions with the same name for different types. These different versions are called the \"methods\" of the function.For example, you could define one version of complement that works on Char, and a different one that works on Strings.julia> function complement(base::Char)\n           comp = Dict('A'=>'T',\n                       'T'=>'A',\n                       'G'=>'C',\n                       'C'=>'G',\n                       'N'=>'N')\n           return comp[base]\n       end\ncomplement (generic function with 1 method)\n\njulia> function complement(seq::AbstractString)\n           # some other code here\n           println(\"string version!\")\n       end\ncomplement (generic function with 2 methods)\n\njulia> complement('C')\n'G': ASCII/Unicode U+0047 (category Lu: Letter, uppercase)\n\njulia> complement(\"ABC\")\nstring version!\nExamples:\njulia> complement(\"ATTN\")\n\"TAAN\"\n\njulia> complement(\"ATTAGC\")\n\"TAATCG\"\nreverse_complement(sequence): Exactly like reverse_complement() from Assignment 5, except that it should accomodate ambiguous bases (the complement of N is N).\nExamples:\njulia> reverse_complement(\"ATTAGC\")\n\"GCTAAT\"\n\njulia> reverse_complement(\"ATN\")\n\"NAT\"\nparse_fasta(path): Similar to parse_fasta() from Assignment 6, with a few changes:\nheaders don't need to be split into their component parts. That is, the array of headers should just be an array of strings  (though the leading > should be removed).\nAll sequences should be valid DNA sequences (including Ns)\nExamples:\njulia> ex1 = parse_fasta(\"data/ex1.fasta\");\n\njulia> ex1[1]]\nERROR: syntax: extra token \"]\" after end of expression\nStacktrace:\n [1] top-level scope at REPL[6]:1\n\njulia> ex1[1]\n2-element Array{String,1}:\n \"ex1.1 | easy\"\n \"ex1.2 | multiline\"\n\njulia> ex1[2]\n2-element Array{String,1}:\n \"AATTATAGC\"\n \"CGCCCCCCAGTCGGATT\"\n\njulia> ex2 = parse_fasta(\"data/ex2.fasta\");\nERROR: invalid base H\nwarning: Bonus Challenge\nIf you want an extra extra challenge, try using the FASTX.jl package to parse fasta files for you.If you're writing your own, be sure that the sequences stored in your array have the type LongSequence and not String.","category":"page"},{"location":"Lessons/Lesson8/#Lesson-8-Putting-it-all-together","page":"Lesson docs","title":"Lesson 8 - Putting it all together","text":"","category":"section"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"(Image: Assignment 08 - Description) (Image: Assignment 08 - Due)","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"Assignments - This lesson is complete when students have:","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"Read Chapter 15 and Chapter 16 of Think Julia.\nRun all code examples from Lesson 8 on their own computers\nCloned the Assignment 8 repository with github classroom.\nCompleted assignment 8 with all tests passing.","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"Book correction: in the section of chapter 16 on modifiers, the book write a function that is supposed to update a field of an immutable struct, so it will throw an error. You can fix this by making MyTime a mutable struct, or by returning a new instance of MyTime. If you do the later, the function signature should not have ! (because it's not mutating the arguments).","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"(This issue has already been reported to the book author)","category":"page"},{"location":"Lessons/Lesson8/#Development-and-analysis-workflows-for-scientific-computing","page":"Lesson docs","title":"Development and analysis workflows for scientific computing","text":"","category":"section"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"Up until now, we have primarily been writing code that's intended to be re-used. Code that is well-designed, tested to ensure it functions as intended, and generic enough to be used in many situations is an important part of scientific computing. This kind of code should generally be put into a package.","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"But this is not the only kind of code.","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"Often times, we also want to analyze a specific dataset, perform statistical tests, make plots, etc. In these cases, we typically want to include code along with plain-english explanations, images (eg plots) and other information.","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"There are several approaches to this, including Jupyter notebooks (julia, python, R), scripts that include explanations in comments (like your previous assignments) which can be rendered into more readable forms with packages like Literate.jl), or plain-text files that include delineated blocks of code.","category":"page"},{"location":"Lessons/Lesson8/#Using-Markdown","page":"Lesson docs","title":"Using Markdown","text":"","category":"section"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"\"Markdown\" is a plain-text markup language that's relatively easy to learn and can express most common formatting that you might be used to from rich-text editors (eg Word) like bold and italics, but also some that you might be less familiar with like inline code.","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"Take a look at the source code for this webpage - it's written in markdown (as are all of the pages for this website), and can be easily edited in VS Code just like your julia files.","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"(Image: Markdown)","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"One can also write blocks of code that have syntax highlighting, the colors that you see in eg. VS Code that help you see the structure of your code. Eg. compare the following block without syntax highlighting","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"function a_function(str)\n    str = replace(str, \" \"=>\"_\")\n    println(\"hi! I'm a String! $str\")\nend","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"to this one, that has it:","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"function a_function(str)\n    str = replace(str, \" \"=>\"_\")\n    println(\"hi! I'm a String! $str\")\nend","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"There are many resources for learning markdown online, including the official markdown documentation.","category":"page"},{"location":"Lessons/Lesson8/#Why-use-plaintext?","page":"Lesson docs","title":"Why use plaintext?","text":"","category":"section"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"You may be asking yourself, \"Why use plain text when I have things like Word/Google Docs/Pages?\" There are a few reasons including:","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"There are many places where you'd like to have some formatting, but rich-text editors are not available. In many of these cases (eg github issues, many web forums), markdown is supported.\nDocuments from software like word often use proprietary encodings, requiring anyone trying to read it to have the same software. All computers can read plain-text files - you can even read plain text files from the command line (just try using head to see the first 10 lines of a .docx file)\nThese proprietary file types often don't play well with version control systems like git.","category":"page"},{"location":"Lessons/Lesson8/#Using-Markdown-Notebooks","page":"Lesson docs","title":"Using Markdown Notebooks","text":"","category":"section"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"Using markdown + julia is easy with VS Code. First, install the Markdown Julia extension for VS Code. (as a reminder, you can click the extensions button in the VS code sidebar and search for julia, then click \"install\" for Markdown Julia).","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"Now, create a new file, and save it as any file with a .md extension, eg test_notebook.md.","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nThe .md extension is typical for markdown-formatted files, and gives VS code (and other software) hints about how to handle it (eg to provide the correct syntax highlighting), but the extension doesn't have any special powers. You can tell VS code to treat any file as markdown by changing the language mode.(Image: language-mode)","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"Now write some markdown - eg","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"# This is a level-1 header\n\n## This is a level-2 header\n\nSome text with **bold** or _italics_ or `inline code`.\n\n```julia\n# this is julia code\nfunction foo(arg)\n    arg = arg^2\n    println(\"woo! Syntax highlighting!\")\n    return arg\nend\n```","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"Notice how code wrapped in 3 \"backticks\" (that's the key next to 1 and under ~ on American keyboards) is formatted like julia code? You can even run that code as if it were in a .jl file using the julia extension (alt+enter)!","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"If you want to see if your formatting looks the way that you expect, VS code has built-in markdown preview: ctrl+shift+V.","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"tip: Tip\nYou can use \"code fences\" in markdown for lots of other languages as well, or just have a block of unformatted mono-space text.```\n# This is unformatted plain text\n\"No highlighting\"\nfunction foo()\nend\n```\n\n```julia\n# this is julia formatted\n\"With julia highlighting\"\nfunction foo()\nend\n```","category":"page"},{"location":"Lessons/Lesson8/#Use-notebooks-for-analysis","page":"Lesson docs","title":"Use notebooks for analysis","text":"","category":"section"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"Assignment08 has 2 parts - one where you continue to develop your bioinformatics analysis package from Lesson 7, and another where you use this code to do some analysis on SARS-CoV2 genomes.","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"Even though they both involve writing code, it probably doesn't make sense to use the same workflow for both. For one, there's no need to wrap the analysis code into a package.","category":"page"},{"location":"Lessons/Lesson8/","page":"Lesson docs","title":"Lesson docs","text":"But just like you should keep a lab notebook to record the results of experiments, it's important to keep track of the code you write  and the results that you get. To do this, we can use markdown files.","category":"page"},{"location":"Syllabus/#syllabus","page":"Syllabus","title":"BISC 195 Syllabus","text":"","category":"section"},{"location":"Syllabus/#Course-Info","page":"Syllabus","title":"Course Info","text":"","category":"section"},{"location":"Syllabus/","page":"Syllabus","title":"Syllabus","text":"Course Code: BISC 195   Course Title: Essential Skills for Computational Biology","category":"page"},{"location":"Syllabus/#Instructor","page":"Syllabus","title":"Instructor","text":"","category":"section"},{"location":"Syllabus/","page":"Syllabus","title":"Syllabus","text":"Name: Kevin Bonham, PhD TA TBD\nRole: Instructor TA\nE-mail: kbonham@wellesley.edu TBD\nGithub: kescobo TBD","category":"page"},{"location":"Syllabus/#Course-Run-Info-Wellesley-Summer-2021","page":"Syllabus","title":"Course Run Info - Wellesley Summer 2021","text":"","category":"section"},{"location":"Syllabus/","page":"Syllabus","title":"Syllabus","text":"TBD","category":"page"},{"location":"Syllabus/#Course-Meeting-Times","page":"Syllabus","title":"Course Meeting Times","text":"","category":"section"},{"location":"Syllabus/","page":"Syllabus","title":"Syllabus","text":"TBD","category":"page"},{"location":"Syllabus/#Description","page":"Syllabus","title":"Description","text":"","category":"section"},{"location":"Syllabus/","page":"Syllabus","title":"Syllabus","text":"Modern biology depends on computing. At the same time, many biologists are intimidated by the prospect of programming. In an era of high-throughput assays and datasets with thousands of samples containing millions of molecular sequences, a basic knowledge of computational methods is critical. Many tools for investigating vast quantities of molecular data have only command-line interfaces, andanalyzing these large datasets is impossible with excel or other software with a graphical user interface. This course will provide an introduction to essential computational techniques for biological data analysis using a modern programming language, focusing on strategies for solving problems rather than specific syntax.","category":"page"},{"location":"Syllabus/#Learning-Objectives","page":"Syllabus","title":"Learning Objectives","text":"","category":"section"},{"location":"Syllabus/","page":"Syllabus","title":"Syllabus","text":"After completing this course, students will be able to:","category":"page"},{"location":"Syllabus/","page":"Syllabus","title":"Syllabus","text":"Navigate their computer and manipulate files using a command line interface.\nWrite a script to perform statistical analyses on and plot a large numerical dataset.\nSearch for a solution to a novel error or software bug and implement it in code.\nUse a version control system to keep track of changes to their code and collaborate with others.\nFind, download, and process large biological sequence datasets from an online source   using a public-facing application programming interface (API).","category":"page"},{"location":"Syllabus/#Prerequisites","page":"Syllabus","title":"Prerequisites","text":"","category":"section"},{"location":"Syllabus/","page":"Syllabus","title":"Syllabus","text":"This course is an introduction to programming, but examples will be rooted in molecular and evolutionary biology problems. Students without prior coursework in biology should be able to succeed with additional effort.","category":"page"},{"location":"Syllabus/","page":"Syllabus","title":"Syllabus","text":"Recommended: Molecular and/or Cell Biology.","category":"page"},{"location":"Syllabus/#Course-Materials","page":"Syllabus","title":"Course Materials","text":"","category":"section"},{"location":"Syllabus/","page":"Syllabus","title":"Syllabus","text":"Online textbook (free): Think Julia: How to think like a computer scientist","category":"page"},{"location":"Syllabus/#Lessons","page":"Syllabus","title":"Lessons","text":"","category":"section"},{"location":"Syllabus/","page":"Syllabus","title":"Syllabus","text":"Pages = [\"Lessons/Lesson1.md\",\n         \"Lessons/Lesson2.md\",\n         \"Lessons/Lesson3.md\",\n         \"Lessons/Lesson4.md\",\n         \"Lessons/Lesson5.md\",\n         \"Lessons/Lesson6.md\",\n         \"Lessons/Lesson7.md\",\n         \"Lessons/Lesson8.md\",\n         \"Lessons/Lesson9.md\",\n          ]\nDepth = 1","category":"page"},{"location":"Syllabus/#Assignments","page":"Syllabus","title":"Assignments","text":"","category":"section"},{"location":"Syllabus/","page":"Syllabus","title":"Syllabus","text":"Pages = [\"Assignments/Assignment01.md\",\n         \"Assignments/Assignment02.md\",\n         \"Assignments/Assignment03.md\"\n         \"Assignments/Assignment04.md\"\n         \"Assignments/Assignment05.md\"\n         \"Assignments/Assignment06.md\"\n         \"Assignments/Assignment07.md\"\n         \"Assignments/Assignment08.md\"\n         \"Assignments/Assignment09.md\"\n          ]\nDepth = 1","category":"page"},{"location":"Assignments/Assignment05/#assignment05","page":"Assignment05","title":"Assignment05","text":"","category":"section"},{"location":"Assignments/Assignment05/","page":"Assignment05","title":"Assignment05","text":"(Image: Assignment 05 - Invitation) (Image: Assignment 05 - Description) (Image: Assignment 05 - Rendered) (Image: Assignment 05 - Due)","category":"page"},{"location":"Assignments/Assignment05/#Instructions","page":"Assignment05","title":"Instructions","text":"","category":"section"},{"location":"Assignments/Assignment05/","page":"Assignment05","title":"Assignment05","text":"Click the assignment 5 invitation above, clone the repository, and follow the instructions in src/assignment.jl. Remember, an easier-to-read version of the assignment script can also be viewed by clicking the \"Script\" badge above.","category":"page"},{"location":"Assignments/Assignment05/","page":"Assignment05","title":"Assignment05","text":"Also, recall that you may run the automated tests on your own computer:","category":"page"},{"location":"Assignments/Assignment05/","page":"Assignment05","title":"Assignment05","text":"$ julia --project -e 'using Pkg; Pkg.test()'","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = BISC195","category":"page"},{"location":"#BISC195-Essential-Skills-for-Computational-Biology","page":"Home","title":"BISC195 - Essential Skills for Computational Biology","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This course is designed to teach you practical skills for using code to answer biological questions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We will largely be learning one programming language in particular -  julia - but you will learn concepts and practices that should be relevant to any language (other common languages used in biology are python, R, and perl). No prior experience with writing code is required to do well in this course.","category":"page"},{"location":"#Using-this-course","page":"Home","title":"Using this course","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This course is paired with lectures, but the written lessons and exercises should stand alone. And even if you are in the lectures, there is a lot of important information contained in the written lessons.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This section explains where to find lesson material, including lessons and assignments, how to read the written material on this website, and how to get the most out of taking this course.","category":"page"},{"location":"#To-get-the-most-out-of-this-course,-you-should:","page":"Home","title":"To get the most out of this course, you should:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Thoroughly read all of the lesson content.  I have done my best to keep lessons concise, with minimal diversions.  This keeps things shorter, but it means that most of the content is important.  If you skip or skim sections, you may miss important concepts  and have trouble completing assignments.\nRun the code in all \"Practice,\" \"Exercise,\" and \"Example\" blocks.  This will be described in more detail later,  but it is imperative that when their are code examples,  you run them, and try to understand the output.  Programming is more about practice than theory,  and if you are only reading, you will not learn.\nMake your own modifications to code in \"Practice\", \"Exercise\", and \"Example\" blocks.  You will learn best by doing.  See what happens when you change spelling,  leave out parts of a command,  or add additional text.  Most of the time, this will produce errors,  but professional programmers encounter errors all the time.  Learning which mistakes lead to which errors  is a critical skill in programming.  I will warn you when going off the beaten path with code  might be dangerous.\nRun all the code in the examples and exercises from Think Julia  A lot of information will be redundant between the book,  lectures, and course content,   but this is intentional.  Have I mentioned before how important practice is?\nFail early and fail often. Embrace your error messages.  If you never make a mistake, you are not learning how to program.  If you are practicing enough, trying new things,  most of the time you will fail.  This is expected, and this is a good thing.  When you do an experiment in the lab,  you rarely get an error message when things go wrong.  Error messages can be daunting at first, but they often contain useful information.  Appreciate them!","category":"page"},{"location":"#Reading-lesson-content","page":"Home","title":"Reading lesson content","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All of the course materials can be found on this website. Lectures, written content and practice problems, readings, and assignments can all be found with the appropriate lesson. There are also indices for each type of lesson content.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Syllabus\nLesson index\nLecture index\nAssignment index","category":"page"},{"location":"#Call-out-boxes","page":"Home","title":"Call-out boxes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Each lesson is broken up into multiple pages, with one major concept or skill per page. It is a good idea to go through lessons in order, though each page should stand on its own (eg practice problems will not carry from one page to the next).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Throughout lessons, there will be colored boxes that contain different kinds of information:","category":"page"},{"location":"","page":"Home","title":"Home","text":"danger: Danger\nThese red boxes will be very rare, but are present where you should be especially careful about the inputs to a command. In the vast majority of cases, messing up an input will not be a problem, but in rare cases you can potentially lose data or (very rarely) damage your computer.Ask Kevin if you want advice on keeping your computer backed up.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Checking Questions\nThese orange boxes contain questions that you should try to answer, and in many cases the answer to the question will require writing code.I will often ask questions that are not explicitly answered earlier in the lesson. They may require you to stretch your knowledge, try some different approaches, or search the internet. (Don't look down on googling! It's an essential programming skill!)","category":"page"},{"location":"","page":"Home","title":"Home","text":"practice: ToDos, Examples, and practice\nThese purple boxes contain code examples or instructions that you should try to run on your own computer.If you get stuck, in most cases it should be fine to contiue the lesson, but you should be sure that you understand the answers and examples in all of these boxes before finishing the lesson.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tips and tricks\nThese green boxes contain useful tricks to make your experience programming easier and more enjoyable. Knowing all of them will not be strictly necessary, but in many cases they will save you a great deal of time, or help you prevent mistakes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"info: Info\nThese blue boxes contain additional information or further reading you can do if you want to deepen your understanding. There is a ton to learn that's beyond the scope of this course, but the information in \"Info\" boxes is not essential to do well.","category":"page"},{"location":"","page":"Home","title":"Home","text":"compat: Windows Users\nMuch of this course is written without respect to computer operating system (OS). However, most bioinformatics tools are built for unix-based operating systems, such as Linux and Mac OSX. In some cases, users of computers running Windows will need to jump through some additional hoops, or make changes to example code to make it work. When that happens, I will explain in this type of box.","category":"page"},{"location":"#Code-formatting","page":"Home","title":"Code formatting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Throughout the course, you will see examples of code. Sometimes, code will appear \"inline\" with other text, but will be formatted differently so that it's clearly code. For example, x = 2 and f(x) = 2x + 3.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Other times, code will appear in a block. The following is julia code:","category":"page"},{"location":"","page":"Home","title":"Home","text":"function my_func(x, y)\n    for i in 1:x\n        println(i + y)\n    end\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"As you can see, this block of code is formatted differently from normal text.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Sometimes, you will see \"command prompts\" such as $ for the shell or julia> for the julia REPL (don't worry if you don't know what the shell or a REPL are right now).  In these cases, when copying the code, do not include the command prompt. I will remind you about this again when it comes up, but just as an example, the following is a shell command and its output:","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ ls -l ~/Desktop","category":"page"},{"location":"","page":"Home","title":"Home","text":"  rw-r--r--   1  ksb  staff    30 KiB  Wed Apr  8 20:12:59 2020  C0005_3F_1A_1000k_1_profile.tsv\n  rw-rw-r--   1  ksb  staff     4 GiB  Wed Mar 18 15:48:06 2020  ko_profiles.sqlite\n  rw-rw-r--   1  ksb  staff     9 MiB  Mon Mar  9 16:41:35 2020  metadata.sqlite\n  rw-r--r--   1  ksb  staff     0 B    Fri Mar 27 15:07:47 2020  test.txt","category":"page"},{"location":"","page":"Home","title":"Home","text":"In this example, you would type just ls -l ~/Desktop and press enter. Notice that in the second block, there is no command prompt ($) a the beginning. That's because this is output, and is not intended to be run as code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nAs much as possible, when executing code examples, try to type the code out yourself, rather than just copying and pasting (unless it's a really long and complicated command). You will learn faster this way, and your typos will show you errors that are worth seeing.","category":"page"}]
}
